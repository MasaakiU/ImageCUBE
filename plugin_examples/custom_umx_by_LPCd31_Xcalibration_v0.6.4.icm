
custom_spc_data = """# cspc
# x
2000.2204816167405 2001.6571591469428 2003.093836677145 2004.530514207347 2005.9671917375492 2007.4038692677514 2008.8405467979535 2010.2772243281559 2011.713901858358 2013.1505793885601 2014.5872569187623 2016.0239344489644 2017.4606119791665 2018.8972895093689 2020.333967039571 2021.7706445697731 2023.2073220999753 2024.6439996301774 2026.0806771603795 2027.517354690582 2028.954032220784 2030.3907097509862 2031.8273872811883 2033.2640648113904 2034.7007423415926 2036.137419871795 2037.574097401997 2039.0107749321992 2040.4474524624013 2041.8841299926034 2043.3208075228056 2044.7574850530077 2046.19416258321 2047.6308401134122 2049.0675176436143 2050.5041951738167 2051.9408727040186 2053.3775502342205 2054.814227764423 2056.250905294625 2057.6875828248276 2059.1242603550295 2060.5609378852314 2061.9976154154338 2063.434292945636 2064.8709704758385 2066.3076480060404 2067.7443255362423 2069.1810030664446 2070.617680596647 2072.0543581268494 2073.4910356570513 2074.927713187253 2076.3643907174555 2077.801068247658 2079.23774577786 2080.674423308062 2082.111100838264 2083.5477783684664 2084.984455898669 2086.4211334288707 2087.8578109590726 2089.294488489275 2090.7311660194773 2092.1678435496797 2093.6045210798816 2095.0411986100835 2096.477876140286 2097.914553670488 2099.3512312006906 2100.7879087308925 2102.2245862610944 2103.6612637912967 2105.097941321499 2106.5346188517015 2107.9712963819034 2109.4079739121053 2110.8446514423076 2112.28132897251 2113.718006502712 2115.1546840329142 2116.591361563116 2118.0280390933185 2119.464716623521 2120.901394153723 2122.3380716839247 2123.774749214127 2125.2114267443294 2126.6481042745318 2128.0847818047337 2129.5214593349356 2130.958136865138 2132.3948143953403 2133.8314919255427 2135.2681694557446 2136.7048469859465 2138.141524516149 2139.578202046351 2141.014879576553 2142.4515571067554 2143.8882346369573 2145.3249121671597 2146.761589697362 2148.198267227564 2149.634944757766 2151.0716222879682 2152.5082998181706 2153.944977348373 2155.381654878575 2156.8183324087768 2158.255009938979 2159.6916874691815 2161.128364999384 2162.5650425295858 2164.0017200597877 2165.43839758999 2166.8750751201924 2168.3117526503947 2169.7484301805966 2171.1851077107985 2172.621785241001 2174.0584627712033 2175.495140301405 2176.9318178316075 2178.3684953618094 2179.805172892012 2181.241850422214 2182.678527952416 2184.115205482618 2185.5518830128203 2186.9885605430227 2188.425238073225 2189.861915603427 2191.298593133629 2192.735270663831 2194.1719481940336 2195.608625724236 2197.045303254438 2198.4819807846397 2199.918658314842 2201.3553358450445 2202.792013375247 2204.2286909054487 2205.6653684356506 2207.102045965853 2208.5387234960554 2209.9754010262573 2211.4120785564596 2212.8487560866615 2214.285433616864 2215.7221111470662 2217.158788677268 2218.5954662074705 2220.0321437376724 2221.468821267875 2222.905498798077 2224.342176328279 2225.778853858481 2227.2155313886833 2228.6522089188857 2230.0888864490876 2231.52556397929 2232.962241509492 2234.398919039694 2235.8355965698966 2237.2722741000985 2238.708951630301 2240.1456291605027 2241.582306690705 2243.0189842209074 2244.4556617511093 2245.8923392813117 2247.3290168115136 2248.765694341716 2250.2023718719183 2251.6390494021202 2253.0757269323226 2254.5124044625245 2255.949081992727 2257.385759522929 2258.822437053131 2260.259114583333 2261.6957921135354 2263.1324696437377 2264.5691471739397 2266.005824704142 2267.442502234344 2268.8791797645463 2270.3158572947486 2271.7525348249505 2273.189212355153 2274.625889885355 2276.062567415557 2277.4992449457595 2278.9359224759614 2280.372600006164 2281.8092775363657 2283.245955066568 2284.6826325967704 2286.1193101269723 2287.5559876571742 2288.9926651873766 2290.429342717579 2291.866020247781 2293.302697777983 2294.739375308185 2296.1760528383875 2297.61273036859 2299.0494078987917 2300.486085428994
# conc_c_list
0.0 0.6 1.0 2.0 2.5 5.0 8.0
# y_set(210,7)
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.001783086542950036 0.0017458525276091096 0.0011397905332380708 0.0015540863742545441 0.0010214284309876267 0.001931433430577468 0.0010285962421191486 0.001778208571611659 0.002104429497720162 0.002221181351340587 0.003133247967737029 0.0025461582079594454 0.0014697970085542145 0.0008597744036397523 0.00251116233558978 0.0034641653967085228 0.0034685517128802087 0.003127839834871497 0.0026472634147837043 0.0022252371776626395 0.0019431263052512796 0.00427400653219563 0.004477987843021355 0.0041486338056704024 0.0043994661439290435 0.0042468981278906155 0.00357653771882297 0.0029762062791199436 0.00570631092990906 0.0054664879655621935 0.00508162657189698 0.005495737166780994 0.005482475155457273 0.003450387544987238 0.004386787776512408 0.006724611995469421 0.006924813348049666 0.006275846673654072 0.00627615164438197 0.006276178060746774 0.003623035526968848 0.005823616160296133 0.008107053580754081 0.00821974650922948 0.007632757817217486 0.007115828726926419 0.0071319505468300185 0.005374790845278643 0.0071067455168343984 0.009164699626811582 0.009277447619407905 0.008603719420923533 0.00823401975732956 0.008293614455033713 0.007332663963498506 0.008309577468982993 0.009782535003087612 0.010453803760658879 0.009770609584351917 0.009262866532657213 0.009742709024307095 0.007757235355050681 0.009196973059141671 0.010831112360167101 0.011458062738599947 0.01075773744677173 0.009837696135266357 0.009871435827590327 0.008234785817926485 0.009341343229328222 0.011285514595398335 0.012838531060847933 0.011584522559383527 0.011305531165540318 0.01151643330072587 0.010517612023498407 0.009789904846546002 0.012412419994717924 0.013886925423290739 0.013891213874679922 0.011926442196161978 0.013094126553387826 0.011192795057299889 0.010664101990980106 0.01356278657559509 0.014176743262711958 0.014855865719026272 0.012178812741122588 0.013182265381591134 0.011220256927165653 0.01167843054716142 0.01416812752652282 0.015382397375377086 0.015023611249431548 0.014434064167899302 0.014538898122303096 0.013623783503071068 0.014624804487418722 0.015496865107249375 0.016486193383002667 0.01607968010493805 0.016080585477514238 0.01570918790130492 0.014355539687572376 0.01574098524251253 0.017107858966827025 0.017918656044548554 0.017024391140693977 0.017564627505749907 0.017560187633694484 0.018225569297434886 0.016016389397168006 0.018745251507000866 0.018859761969623412 0.01875755910331646 0.019399970801887947 0.01916529439811967 0.01866826915517739 0.017528220371704248 0.01927740536650686 0.02062117399435673 0.02051042875501978 0.020740065364753313 0.020582628790396088 0.019815825186913598 0.018874129917427644 0.020765261804228302 0.02226596684625147 0.022148262684161868 0.022303333396651713 0.02202973801229082 0.021491200911351357 0.02052017063365385 0.022565439037001638 0.023948825555070673 0.023313972031392696 0.023830901502866687 0.023229849395586602 0.02302231190592658 0.022282476740638296 0.023686393891396488 0.025257854156263602 0.024637690968213558 0.02496404843149255 0.024461456521250438 0.02384755927082566 0.02382089374123729 0.0252623627001191 0.02620663569799524 0.026570224993686407 0.02594741726439619 0.025845887297294524 0.024288050624157016 0.024053847704626985 0.027842395894925438 0.027663717540866543 0.027893367118346578 0.027088451188344277 0.027514556994237768 0.024828147258921372 0.024468233004837706 0.02903513643344636 0.029318559832308334 0.028160555414495386 0.028397158211764723 0.029150470483064832 0.02583181653277509 0.025594880891028085 0.02990659064122831 0.031211984918255616 0.029925964345942586 0.029593971181549224 0.029374356081745205 0.028139328696301414 0.026994401545191914 0.032213804343006844 0.0332904257377518 0.03260677031079479 0.03156620298436519 0.03143173145195509 0.030345157798409243 0.02949563762888082 0.0339080814495044 0.03498561748656413 0.03370754388423122 0.033733737093235155 0.03185399657749194 0.0345239410913649 0.030528901400180768 0.03422653490113296 0.03647081911524515 0.034732097753570584 0.035398127937941164 0.034407871902331896 0.03317210366938294 0.03232819841203226 0.03756666626008982 0.03786898346933411 0.03775161883949678 0.03726233616011283 0.039130499686720124 0.034901387910139706 0.03577943102002132 0.03938757000068867 0.040516689061219024 0.040387988035437306 0.04025397759336682 0.04056297994826199 0.03940717612882362 0.03807903907921496 0.04169646208808103 0.043972947275194976 0.04339083805520565 0.044078799678055114 0.04344337003748902 0.04373841987563413 0.04289814876440678 0.04618438546351055 0.04770011637068683 0.04793674350906732 0.04833743956319532 0.04894002338123406 0.04849573713724832 0.047757722749054723 0.05109123003343148 0.05211216838838596 0.05347006498062091 0.05327327280510526 0.05385952803574472 0.05420292047725132 0.05262703336753036 0.056444999983555594 0.057521370767156736 0.05956321453333168 0.059988725749644256 0.060130707348762025 0.060441487302654626 0.05861505094371883 0.06330470960145662 0.06511827716939622 0.06767461866608723 0.06884019197044967 0.06929149259428993 0.06874663147838292 0.06723412969813433 0.07181506411985279 0.07430682937247951 0.07766055049557846 0.07889058700277118 0.07955884893483278 0.07939459023380394 0.07843828495518487 0.08174324190031952 0.0844840902407586 0.08803108226188125 0.09031391959586689 0.09076103024691112 0.09242390074133383 0.09036586360111383 0.09334866665685296 0.09676214827520244 0.10169639370204803 0.10477383888343023 0.10542593996936567 0.1085173360873408 0.10540451902269873 0.10607242036564454 0.10986302916380469 0.11677557502471717 0.12117120911303836 0.12173463528085393 0.12468257843755068 0.12302247568415656 0.12057441943718811 0.12479606422012687 0.13364307198926478 0.13946999902253296 0.14054162901977924 0.1434466367852268 0.14140896191530247 0.13539639828590433 0.13985952090266093 0.1501214145733035 0.15682985243822212 0.15906052479361238 0.1623778504650465 0.16127930788195124 0.15122770351412998 0.15758384591427144 0.16772002382916323 0.17470486865936752 0.176813212977234 0.180482530600254 0.17828049673812757 0.1690677450476054 0.17449484320197348 0.1870789830597292 0.1923970275648481 0.19487144602697065 0.1988072394225261 0.19823520329249444 0.1904068925444159 0.1952221350799669 0.2072576245106347 0.21276981408554507 0.21513544192007727 0.22205672514729696 0.21999239952471694 0.21595555847313794 0.2211547926931751 0.23350624524415392 0.23746241776827404 0.23953088333118025 0.24795576282230447 0.24787461472514044 0.24579513673815334 0.25161404017488864 0.2627431276166048 0.2654336359938505 0.26790084200024383 0.28005490131341626 0.28005385884110656 0.282336398174987 0.2872396346830682 0.2983674148267255 0.3003494916926148 0.30295035825431194 0.3199987092371135 0.3198283521804045 0.3200840033328804 0.3241066705300328 0.3364996222426435 0.33705836432138925 0.34015836294795776 0.3592580790145754 0.3592097158619343 0.35359661191132774 0.35789989046233456 0.3687162018380431 0.367294425889772 0.3704408278805633 0.38708271075663664 0.3870772637667309 0.3772726709060991 0.38099722559957183 0.38759298068479414 0.38603630810161654 0.38815370766300294 0.3986419567261853 0.3981000958531896 0.3886525135418128 0.39160798815066133 0.3951818396399872 0.39442345436940435 0.39563539194333763 0.39897405515487017 0.39884298543438124 0.3897738969511141 0.3922615220680969 0.3966638911179923 0.3965153398986751 0.3976416427984687 0.39721784508761226 0.39677050322994 0.3815889474985933 0.3851817428893479 0.39158747412268713 0.39609021078858986 0.3944213534505341 0.39647557728529154 0.3936718561213333 0.36894250587075283 0.3750585246866922 0.38520664727665566 0.39375899830974964 0.3926792511633638 0.3931060033569743 0.39013303021834533 0.3531810096945832 0.36132380139633147 0.37578968532510953 0.38715554484069653 0.38676363021457283 0.38610746562577347 0.38499110970926437 0.34328153127177524 0.3523836616058442 0.3720721327237232 0.3852590146083126 0.3848547859133158 0.38415136185651577 0.38246737865238695 0.33744727525676765 0.34836156127396545 0.37171764435903837 0.3857950956480288 0.3858022808554302 0.38792529333650805 0.3844067754969284 0.33855909908201853 0.3499647460253866 0.3749398675812165 0.39143207523146883 0.3916102686849555 0.3916480834344706 0.39065964834930783 0.3450561897829617 0.35728787814535423 0.3823643901825441 0.4009096705279527 0.40079430423970963 0.40103558218800467 0.4018800801116935 0.36061463712647346 0.37220876948139525 0.3966573669571767 0.4156722353150868 0.4127365218500664 0.4158846266931144 0.41408199221861847 0.3848288686589093 0.3951866444684849 0.42002050482126363 0.43690851314151324 0.43559407131216366 0.4378084925045542 0.4348029105941178 0.4167912011401877 0.4274493213231373 0.4495672775877408 0.4625501749362858 0.4625733813337979 0.4643574043214994 0.4619032672772293 0.45919394505355116 0.46798192578703485 0.4872844349766724 0.4945148681944087 0.4945030732243779 0.4967530835366901 0.49449281813425744 0.5129270063090452 0.5182506425184125 0.5338136451340773 0.5359108344446355 0.5338715820268709 0.5369852174261489 0.5351514280242639 0.5765980152613892 0.5791387766208516 0.587858408010046 0.5837561717576605 0.5809609741099329 0.5836446346363046 0.5809463991569546 0.6486655554646279 0.6492071023653603 0.6487462687081149 0.6342145425305799 0.6332506264228115 0.6340220716534701 0.6301015749963952 0.7288061432138127 0.7241965649526401 0.7160023458486 0.6900281710569659 0.6896464666681308 0.6882443721993667 0.6845264316395365 0.8116261260080245 0.80297896928657 0.7866648578810089 0.7510973189282548 0.7508278926937253 0.7453780049753432 0.7427213512424835 0.8906523821127281 0.8811410891731388 0.8567332872665735 0.815439198598469 0.8141257291547419 0.8044461994701584 0.8005739432916347 0.9549008173644264 0.9461186056923255 0.9184689146768659 0.8774928803812119 0.8752251915242604 0.8647118612702145 0.8602582084689951 0.9953076954743363 0.988247323926271 0.965084918129851 0.9320774566519314 0.9307101012317263 0.9164109053638985 0.9136835869178945 0.9996135847498329 0.9995930092806934 0.9894354337205131 0.9689087613119631 0.9676192197911315 0.9556901718192514 0.9514038836965779 0.9816410566990998 0.987349283634277 0.9975236775815163 0.9932676736538082 0.9928442310888604 0.9851847340090666 0.983061789226961 0.9374061574100874 0.9518750307069307 0.982187889130862 0.9978623016606333 0.998900050404095 0.9992828796796884 0.9992931561769541 0.87833715847064 0.9030915684237213 0.9504475097398573 0.9817236341953566 0.9819792033448065 0.9942658386300205 0.9947256492434927 0.8147143843542916 0.8450528796080914 0.9090441668442752 0.9537628377859765 0.9540544093396124 0.9729915305969 0.9729561029313678 0.751452808198952 0.7869619776466847 0.8603688829774734 0.9165461791618053 0.91714767665748 0.9396099954571708 0.9396139913463715 0.6915895872766058 0.7303565304193554 0.8121619398112303 0.8745953382588671 0.8761375567451515 0.9025953388893142 0.9039309101720976 0.6387090300136506 0.6788116202464507 0.7671651309326106 0.8337507573730558 0.8358021042615746 0.8668639649720697 0.8684655570214672 0.5913599320700683 0.6316745476840318 0.7231995805462736 0.7943996374941604 0.796899917754651 0.832082026388776 0.8334069750700039 0.5483017860983382 0.5886919694594944 0.6811166640677889 0.7536639055859009 0.7573679713069543 0.7933097643414411 0.7955506925443756 0.5128174023824816 0.5529962910736015 0.6456632367706308 0.7178258167588416 0.7220968388479283 0.7596473207890999 0.7621383403906112 0.4834722128830924 0.5223090208003152 0.6154588647352031 0.6863054159198922 0.6908160283322001 0.731110522781363 0.7334689086759949 0.4573670732558904 0.4945994690309377 0.5869874628488054 0.6549496703885641 0.6598889981287726 0.7008971415789045 0.7037376101632958 0.4352874441214583 0.4710146942239275 0.5600559657301252 0.6260247486500508 0.6309112165113668 0.6708640078121652 0.6749140407493308 0.4134496876558204 0.44673150155535885 0.5310454304466747 0.5943672210573543 0.5993517940130959 0.6368019185933886 0.6428939751417608 0.39218772820473496 0.42239287211527643 0.5024258134968886 0.5611177484455572 0.5661223500283594 0.6013580712391116 0.6070137682955293 0.3754044404258359 0.4046534692060103 0.47826367358314203 0.5342063102142812 0.5371481390817837 0.5750809229862062 0.57657866535177 0.3588280980887161 0.3855579858073238 0.45342178711023373 0.5059028349195853 0.5092010663036635 0.5415949168279579 0.5448820176500122 0.34165044593559657 0.3692868963014837 0.43172516050588766 0.479997340363281 0.4838503842947244 0.5137132367375298 0.5173099437213091 0.3278950892826771 0.3518488553636164 0.4107626216173917 0.45710451773423366 0.4617506458357815 0.48700979775306785 0.4906222636169815 0.3163505768826024 0.3401201533788506 0.3966453146291914 0.4399659043413445 0.4437869174155592 0.4681631396022476 0.47157469049716905 0.3053111691946712 0.3272275351144451 0.3797567799987195 0.4217794287884667 0.4246672774095167 0.44822634600964384 0.4505600510327856 0.30060547921817965 0.32112318162216275 0.3709812588045338 0.4108973396601945 0.4140337293257941 0.43741514980852625 0.43807211078736946 0.2955147687669088 0.31565095598136517 0.3621549964074065 0.39889987868338406 0.40238979471025205 0.4239489788210931 0.42459169245299433 0.2909790404126618 0.30981345396895965 0.35407127793840815 0.3878888507150208 0.3908283995318683 0.41145093317158765 0.4129446124151549 0.28673445017019067 0.30412482015430736 0.34677256229296316 0.37865082470705347 0.38082118439140566 0.4013287205280435 0.40339487790689194 0.2812548606898123 0.29860446070013946 0.3390818510388124 0.3678249608608905 0.36952136506876077 0.3925955219041724 0.3926357602583931 0.2734379694011011 0.2898673022691376 0.32982039270768104 0.3563591012206232 0.3584830666636283 0.37950178838474147 0.3797374027889784 0.26472351643219677 0.2797698463354301 0.3197530335400683 0.3457392858491898 0.348080713708592 0.3662069550270133 0.36702227069144006 0.25538971476223615 0.2704535659974089 0.30923468515335806 0.3363943018439516 0.3378369954288363 0.35606872625860975 0.3561931676202623 0.2458180985701362 0.2615522466199064 0.2998821280835329 0.32903867677711873 0.32995908849522426 0.34742523742097275 0.34827990321293206 0.2379956306357469 0.2538477670740741 0.2944506621123093 0.3230120939667725 0.3243458521678872 0.3428835004114955 0.3435576338967864 0.23086205132343163 0.24750233023876944 0.28909080110644925 0.318718431796706 0.3201343780487517 0.34018296924493396 0.34113906802735094 0.22538886725515223 0.24276328114837473 0.2852905488357782 0.3173246190416438 0.31826022421639766 0.3392678109545174 0.33925234914353664 0.2221108464924232 0.23965011914211082 0.2833720594195198 0.3172272838867132 0.31844474825967495 0.3386019091886511 0.3395522185455139 0.2198696954252124 0.23690578796792489 0.2830834981354473 0.31912713935939313 0.32080052977933193 0.3378129468361434 0.34116867608798085 0.21932759527761134 0.23788638408553608 0.2842886180370692 0.3202136255592908 0.32247083082779393 0.3383614456445425 0.34335341906391215 0.2192034569482778 0.23837888137439184 0.2858037972464442 0.3222509984755323 0.3246215823707225 0.34220028561277827 0.3472189338263828 0.22092960917611093 0.2401742498321349 0.2895153215062172 0.3274865164103442 0.3298880587596261 0.3488449026790738 0.3533794901093966 0.22421638843775135 0.2442267739494568 0.2943777897599759 0.33269026457610384 0.33561244246482885 0.3558183478555772 0.35964347163594834 0.22685466607604338 0.24695892732907054 0.2974294827202 0.3385164366920714 0.34007854511303126 0.3606622335600326 0.3626483505599738 0.22795866952852678 0.24878201855561993 0.2984232260690285 0.33843040868084173 0.3401137393837123 0.358661871887315 0.36158027731999376 0.23111759971564105 0.25127839938478047 0.3002336408595626 0.3405066163257848 0.34301445659701846 0.3574964621630299 0.36122960810168203 0.23376030225707484 0.25386722584939275 0.30205096968433914 0.34198133777484774 0.3446239576648588 0.3566068122832133 0.361609886614796 0.236911416851935 0.2558035583292485 0.30357935838348954 0.34257142453102474 0.34494098354891317 0.3556810957384129 0.36185006277874937 0.23881054759936826 0.25771006166654664 0.30293114337441474 0.3439413777114423 0.3453171507954238 0.3567812055277292 0.3621397570186998 0.24074799610012654 0.26012008481795923 0.3048059044562995 0.3454814676725483 0.34708033529545634 0.3594658928872571 0.3630143156271014 0.24293387989329404 0.2615057382812566 0.30658355608386156 0.3447425748361955 0.34754005694779316 0.36001113403926077 0.36411044218294836 0.24417294712208026 0.26186047351778563 0.3062147570701015 0.3419683112335863 0.34528687879621267 0.3594157684999386 0.36428616063583796 0.24696528614778507 0.26411972450372795 0.3077642931900715 0.3416564424799057 0.3450246146353793 0.36186479156543305 0.3661574442737858 0.2510923429411076 0.2679017256675579 0.30992986139797013 0.3453282469827794 0.34823392335134734 0.36580275237181165 0.37039665162247387 0.2532166974197725 0.2706183660093166 0.3118743910630171 0.3474934529428907 0.3508564348797071 0.3657701261476652 0.373466986320269 0.2548127032088913 0.2715211193479775 0.31257415438639613 0.3465032079575421 0.35109521854580217 0.36497879649602305 0.3735652012528573 0.2532771731172745 0.26872002395477435 0.3097158130617071 0.3411225916032926 0.34510817400788196 0.35764073696931176 0.36526839044366655 0.24595690744390694 0.26096647457970246 0.29758259292072314 0.32574731606651514 0.32769934760665587 0.3380510881089307 0.34373222379446366 0.2385466694797102 0.2516496827582503 0.2830177775299529 0.30536323575177177 0.3069955334817694 0.31473881011111515 0.3200337735269808 0.23344054389265023 0.2431861265579775 0.2703112092270511 0.2895842760903705 0.289801515287352 0.296015297737513 0.3052616176398644 0.23181100045233977 0.2392715544193933 0.2671973893144244 0.2810058363524798 0.2824739268336073 0.2870566281066058 0.29440103076622526 0.23511104204744265 0.24258687962804548 0.2654744343393382 0.27854173168697016 0.27964425175219515 0.28278202429527693 0.29171718763229026 0.24298629922508175 0.25023050325650104 0.26994254819975166 0.28104659049067404 0.283213525145356 0.2849350940139419 0.2944483860203799 0.25428926692608245 0.25970635716157986 0.27893395023643297 0.28872677431895477 0.2908936434381877 0.2942733929360908 0.30227818818571733 0.26510231978444665 0.2700927008085292 0.28770850959216226 0.2973585950265679 0.2992163729917634 0.30190166169088095 0.3079963990639101 0.2775637871125594 0.2827326070815094 0.2993753817335031 0.3070336437130752 0.3083076552292692 0.31058218789100744 0.31633245500522306 0.2903246089668111 0.2957815966387207 0.3116742276637472 0.3181267622511335 0.3194475411441132 0.3214138766613338 0.32676670378566086 0.3024867567105737 0.3077527631476945 0.322585790229558 0.32863134104038216 0.32939534908642054 0.3331132326405056 0.33588454041287047 0.3103033166837572 0.3149712632083618 0.331669657897539 0.33818058339073853 0.33858451946919105 0.34048413062360905 0.34434247805461277 0.31063365961339595 0.3162489556172522 0.3352051584401661 0.34284265138995995 0.3429079729126101 0.34456844398695596 0.3493637223999434 0.3023857225587158 0.310452879519056 0.3314605381163598 0.34209389487402797 0.3420782728538362 0.344531883564471 0.3484494130232996 0.28602691818442505 0.2965788510393511 0.319953996192748 0.3359288341233785 0.33615534290773863 0.33843952991196086 0.34224233782628644 0.26446317991119384 0.2771020159598664 0.30371050651162856 0.3248290789696988 0.32421683469013657 0.3291012028956862 0.3322356564845558 0.2413325456478637 0.25476057918806316 0.28604943020080975 0.3099930227582912 0.30828736229290055 0.3159937376143982 0.3193073188165302 0.2186204050045574 0.23114344686494068 0.26506435971771225 0.29036581477917367 0.2906959338750569 0.29731657254809374 0.303515237004268 0.19640723192890203 0.20985256489913506 0.24475505454482327 0.2713973206946029 0.27176294168446313 0.2782571013391837 0.2856496547270364 0.1784558712822197 0.1925588362839018 0.22677842789440888 0.25419184489420876 0.2531029429628761 0.2651217263071826 0.26826239456984335 0.16421383601242256 0.17793802562592265 0.21202157841338473 0.23946968196764068 0.24046736397753754 0.2520154451752027 0.2565623033933945 0.15073498590100243 0.1649573580075589 0.2008085700513389 0.2268663493987504 0.2288651973592791 0.24490199335672563 0.2485933961314773 0.1403714270791001 0.15403806602957354 0.1905489145164832 0.21788460150672645 0.22011924640616723 0.23886624124073405 0.2408165278508688 0.1320844399327291 0.14452131540663038 0.1832826085553601 0.21039955720262798 0.2138342206782637 0.2356905450117784 0.23861612961826767 0.12272061006697804 0.13667503941381992 0.17510456961827672 0.20310956115343698 0.20616922410913724 0.2305292491527427 0.23359912224849017 0.11429331304288576 0.12837588598099425 0.16643520708992607 0.19353335740775662 0.19742557235971053 0.22354275113901675 0.22458890446782198 0.10644934360820608 0.12042377058346906 0.1577223395363231 0.18574506740208624 0.1897335204174073 0.21237599918111677 0.21601290648883192 0.09942209246311141 0.11198316979374062 0.14714222647527478 0.1744893169433978 0.17768820072660396 0.20016412771020234 0.20368480863140437 0.09239137198686345 0.10427137222341634 0.13677670860636845 0.16101694854757825 0.16415055918516053 0.18513222344701313 0.1882637269177329 0.08515736590087053 0.09619849004492581 0.12552650733164422 0.1475024604177177 0.15011659533230134 0.16835818534462565 0.1717793645279373 0.07882897282497334 0.08786238988520095 0.11548535807009513 0.13277943504945577 0.13543432513942724 0.15140904123381194 0.156591354680911 0.07278797517302035 0.08050322489221334 0.10497290417578878 0.12178272888466161 0.12453569548995208 0.13593269970343663 0.1415404344704077 0.06704840675770352 0.07417105574758878 0.09558355782639401 0.11133791466589082 0.11334143777974554 0.12460325013181836 0.12776281561709024 0.06225825224725984 0.06841979169513643 0.08751621089380351 0.10147224021677925 0.10320318922085955 0.11348740218462461 0.11675743466333516 0.05744233996218772 0.06303940325517238 0.0811600330201604 0.09323858629296614 0.09510959016762471 0.10407057273371037 0.10873001393365855 0.052847563263005985 0.05819607055348813 0.07504926305169365 0.08624447868557594 0.08749261271558642 0.09648719925066236 0.10049307382043249 0.04939987670238757 0.054314904751916554 0.06954076352725672 0.08093937906462462 0.0820860144748482 0.0889401506187611 0.09488497158473462 0.04608447714338196 0.05073515218182763 0.06451617939755899 0.075907127643775 0.07720707233960636 0.08354833586754765 0.08930190095507695 0.04265459448378846 0.04720112432222587 0.0600728211120409 0.07128413781530671 0.07206035066331576 0.07940581730176222 0.0818013569019883 0.039938645848919055 0.04417647197958251 0.05742439226892644 0.06799681845806729 0.0686732907965264 0.07524020123905728 0.0775203936535393 0.03709410374185644 0.04170896838968839 0.05414546885848956 0.0640519805731535 0.06546226767286698 0.07105102484366393 0.07537077676554411 0.034601619122152504 0.03895943682016782 0.05046267345017817 0.060825036521135994 0.06219487651991625 0.06724709310556304 0.07243033346515063 0.032978273931853874 0.03612158677943561 0.04766342543468242 0.057747232006231955 0.05932757997898257 0.06259262757157745 0.06877788875604768 0.03060117135684532 0.033653298727606334 0.04555856207064431 0.054391946126324295 0.05576894330833124 0.0594406112887044 0.06518898172574543 0.029686417009073224 0.03187810321764306 0.04425948880712798 0.05194134874615816 0.052518186607355036 0.05786982688781202 0.06234841454203406 0.02774479354727511 0.02984706244453824 0.04248473750932562 0.04913622383115812 0.05076456497522243 0.05482974065127594 0.059204498469361155 0.026542168111857306 0.029086827493721677 0.03933932612052739 0.046644359711084576 0.047556472789308996 0.050484656601615725 0.05640107805057586 0.024944320892768136 0.027726872241609975 0.037014636565275164 0.045824532494363475 0.04622788915767882 0.04934145643215826 0.0533803587187691 0.024132840674897398 0.026720889038248756 0.03658950621178195 0.04292924435451623 0.044399673320364555 0.04760344692199871 0.05122925209681263 0.0229904605255339 0.02635755463894967 0.0337018806807576 0.0409881584291554 0.04180660549572201 0.044820664476398306 0.04983359823903043 0.022213175250454315 0.025046361213571296 0.032370008236192835 0.03971275772206494 0.04067184502802004 0.04377267152892804 0.04670484037244725 0.021447741747274776 0.023840615202528684 0.03083513999658105 0.037148684581848446 0.03794917801853631 0.040128779416099346 0.044526067841747646 0.020685461187688187 0.022741462627200684 0.029812651805039503 0.035242373798484425 0.03683307855557884 0.03733126771347908 0.04329318832899932 0.019499950532782313 0.02191444512890918 0.027576987453594326 0.03341558885972968 0.03378092607735203 0.03517648814270928 0.03982893557984242 0.018201190086302423 0.019941142518421773 0.02543131269039378 0.03074434731240551 0.03148207062897666 0.03208773808384367 0.0379350707328924 0.017851205241424584 0.019356740186271613 0.024352510389938173 0.029058666019372535 0.030501862471071166 0.03150155215392139 0.03556692140687698 0.017677614746114 0.01872356088169367 0.023966759126486513 0.027864608646557466 0.028594287118492375 0.03026464528083499 0.03357337950583379 0.017145052366464672 0.017752903601147303 0.023176435398098688 0.026234431421897714 0.026521962790132324 0.028501568545041094 0.03150385050770004 0.016573890326423295 0.01706319905555912 0.020750707302992333 0.024343264226498598 0.02439097852944408 0.026532015425232962 0.030028985829996135 0.015946515727396242 0.01622204268006765 0.019197466700763693 0.023242206483080487 0.023187433937419885 0.0252453655562926 0.028224635368467598 0.01507802479406506 0.015760172253774796 0.0186584200184928 0.02276955013716036 0.02302086391253655 0.023715675167377423 0.026882016224846476 0.013969674673781246 0.01520256971119246 0.018228943022278545 0.021273450198249826 0.021828249895967176 0.022133009636874142 0.02534675331192812 0.013000621176904323 0.014004010063023615 0.017057799043473716 0.01965136003070139 0.02025212559357597 0.020973801225140136 0.023185457783354554 0.012007927288283603 0.012806909585386928 0.015442716971536182 0.0182052735107155 0.018900932916253055 0.01938356888285974 0.022325852640519978 0.010974464844101983 0.011523289562988447 0.014375307979119284 0.016416883920271526 0.017359710330420594 0.017958093014943912 0.021080156334861856 0.010166005997033094 0.010374434948994864 0.013223258361979278 0.015842375321007778 0.016250518375821532 0.017201540861908973 0.01903918383739102 0.00941087503898996 0.00966042381971752 0.012287944851394714 0.014914876228583425 0.01489054226397793 0.01611232286804832 0.01820395483724776 0.00946432292346417 0.00879560467866927 0.01203334290593531 0.014438565710336013 0.014257398810143297 0.015363233006764978 0.016893837254109135 0.008955308308517887 0.008522482537241397 0.01121493164461379 0.013205356600774971 0.013206170678656332 0.014151812571247896 0.014615500629362056 0.008312963005001523 0.00803366772956391 0.009839896595791276 0.011945798917340057 0.011166401824626087 0.011662325100876027 0.013777395082682522 0.007306348179595502 0.007346640456617672 0.008135300743821551 0.01095262148275699 0.010740234763304317 0.009887079146712668 0.01252284946989846 0.006558030975631946 0.007718913090476016 0.007456343096068005 0.00940500787261923 0.009415053514128729 0.008197946572721344 0.011995113952947167 0.00673323090278651 0.007396457355707058 0.007533974027621366 0.007800065748785827 0.008853185811562667 0.008637727880890306 0.010791584900759675 0.006977249623795969 0.006815871904854842 0.007684508745040569 0.007937199053143 0.008224929813953475 0.00853528871043964 0.008670708458263607 0.006359019516159753 0.006416838808497164 0.0057994591833329424 0.0055486965447952945 0.006492874400342208 0.00532722083032592 0.007836295562311711 0.006547783953955251 0.006354818691196176 0.006006681469983141 0.005769046966295255 0.005906985858774716 0.005478272348389973 0.00834106747755274 0.005926747513047715 0.005967524673115964 0.005903831269510175 0.005917940274450325 0.005863258198419385 0.004086067451409983 0.006993542698439502 0.004663632567336059 0.004690460990994819 0.0041826289693722915 0.0040873521147646655 0.0042661578912969655 0.0018951836959430533 0.004559949673629035 0.004175055916476938 0.0036152352979611944 0.0035943551796298948 0.0002840606045325802 0.0033198294874943668 0.0021786180094627242 0.003366413072921845 0.0030694420666759242 0.0026230189489757747 0.0018294486813241566 0.0021838520594339083 0.0014936936368313968 0.0017758924638428654 0.003604772934082654 0.002136094550232528 0.001454059887321591 0.0014062104919076684 0.001531473687062987 0.0011376022969861815 0.0018686131821301906 0.0028563360242665117 0.0018032234540175129 0.0011952011822204762 0.0005667329990837714 -0.0003983562099275394 0.0003908645868048099 0.0011917711563771457 0.0017325225495528538 0.0006184052409707524 -0.00017927791353773714 -0.00047540464995583537 -0.000600246892935726 0.0010150919969823522 0.0003894618380111199 7.523312069676914e-05 0.0 0.0 0.0 0.0 0.0 0.0 0.0
# init_data(self):
    self.conc = 0
    self.contour = 0.1
    # prepare function to display data
    from scipy import interpolate            # PCHIP algorithm (Hermite interpolation)
    self.y_func_list = [interpolate.PchipInterpolator(self.conc_c_list, y_list) for y_list in self.y_set]
    # set initial data
    val_list = self.conc2spectrum(self.conc)
    self.add_sub(y_data=val_list)
    # add preprocess
    from PyQt5.QtWidgets import QLabel, QDoubleSpinBox, QPushButton, QFileDialog
    import numpy as np
    conc_c_min = self.conc_c_list.min()
    conc_c_max = self.conc_c_list.max()
    def init_widgets(self):
        # ウィジェット
        self.contour_label = QLabel(" contour ")  # 等高線
        self.contour_spbx = QDoubleSpinBox()
        self.contour_spbx.setDecimals(2)
        self.contour_spbx.setSingleStep(0.1)
        self.contour_spbx.setMinimum(conc_c_min)
        self.contour_spbx.setMaximum(conc_c_max)
        self.contour_spbx.setValue(self.parent_window.spectrum_widget.spc_file.contour)
        self.contour_spbx.setKeyboardTracking(False)
        self.conc_label = QLabel(" conc. ")
        self.conc_spbx = QDoubleSpinBox()
        self.conc_spbx.setDecimals(4)
        self.conc_spbx.setSingleStep(self.contour_spbx.singleStep())
        self.conc_spbx.setMinimum(conc_c_min)
        self.conc_spbx.setMaximum(conc_c_max)
        self.conc_spbx.setKeyboardTracking(False)
        self.conc_spbx.setValue(self.parent_window.spectrum_widget.spc_file.conc)
        self.btn_lut = QPushButton("lut")
        self.btn_lut.setFixedWidth(40)
        # イベントコネクト
        self.conc_spbx.valueChanged.connect(self.conc_spbx_value_changed)
        self.contour_spbx.valueChanged.connect(self.contour_spbx_changed)
        self.btn_lut.clicked.connect(self.set_lut)
        return [self.btn_lut, self.contour_label, self.contour_spbx, self.conc_label, self.conc_spbx]
    def conc_spbx_value_changed(self, event):
        spc_file = self.parent_window.spectrum_widget.spc_file
        spc_file.conc = event
        value_list = spc_file.conc2spectrum(event)
        spc_file.set_sub_data(sub_idx=0, y_data=value_list)
        self.parent_window.spectrum_widget.plotItem.vb.addedItems[0].setData(spc_file.x, value_list)
    def contour_spbx_changed(self, event):
        if np.allclose(event, 0):
            self.contour_spbx.setValue(self.contour_spbx.singleStep())
            return
        # set data
        spc_file = self.parent_window.spectrum_widget.spc_file
        spc_file.contour = event
        self.item.setData_set([(spc_file.x, spc_file.conc2spectrum(c)) for c in np.arange(conc_c_min, conc_c_max + 1, event)])
        # update single steps in conc_spbx
        self.conc_spbx.setSingleStep(self.contour_spbx.value())
    def set_lut(self, event):
        from Modules import general_functions as gf
        file_path, file_type = QFileDialog.getOpenFileName(self.parent_window, 'Select lookup table file', gf.settings["last opened dir"], filter="lut files (*.lut)")
        if not file_path:
            return
        # open lut
        lut_array = gf.import_lut(file_path)
        self.item.setLUT(lut_array)
    func_dict = {"init_widgets":init_widgets, "conc_spbx_value_changed":conc_spbx_value_changed, "contour_spbx_changed":contour_spbx_changed, "set_lut":set_lut}
    from Modules import my_widgets as my_w
    from Modules import general_functions as gf
    items = my_w.PlotDataItemsWithLUT([(self.x, self.conc2spectrum(c)) for c in np.arange(conc_c_min, conc_c_max + 1)], pen=gf.mk_u_pen(50)) # slower
    # items = my_w.PlotDataItems([(self.x, self.conc2spectrum(c)) for c in np.arange(conc_c_min, conc_c_max + 1)], pen=gf.mk_u_pen(50))       # faster
    master_processes = ["self.parent.spectrum_widget.addItem(params['item'])"]
    params = {
        "item":items, 
        "detail":"interpolated", 
        "draw":"none", 
        "data":[None, None], 
        "func_dict":func_dict, 
        "master_processes":master_processes
        }
    self.write_to_object(master_key="PreP", key_list=['prep_order'], data_list=[[['CustomBtn_master', {"mode":"init_s", "params":params}]]])
# conc2spectrum(self, input_conc):
    import numpy as np
    # case 1
    if input_conc < self.conc_c_list[0]:
        return self.y_set[:, 0]
    # case 2
    elif input_conc > self.conc_c_list[-1]:
        return self.y_set[:, -1]
    # case 3
    else:
        val_list = np.empty(len(self.x), dtype=float)
        for i, f in enumerate(self.y_func_list):
            val_list[i] = f([input_conc])
        return val_list   # shape:(len(x_val_list))
"""

# ファイル開く
import types
from scipy.stats import t
from Modules import cspc_core as cspc
from scipy.optimize import minimize_scalar
from scipy.optimize import nnls
f = io.StringIO(custom_spc_data)
img_cb_info = cspc.ImgCbInfo(f)
cspc_file = cspc.CustomSpc(img_cb_info)

# unmixing
def unmixing(self, sRS, eRS, no_baseline_for_added=False):
    # プログレスバー処理
    self.pbar_widget = popups.ProgressBarWidget(parent=self, message="Executing spectrum unmixing... please wait.", message2="0 out of {0}".format(self.spc_file.fnsub))
    self.pbar_widget.show()
    segment_list = self.pbar_widget.get_segment_list(self.spc_file.fnsub, 97)
    # (sRS, eRS)と(sRS-idx, eRS-idx)は必ずしも一致しない（RSは降順にもなりうるがidxはあくまで昇順に並ぶ）
    sRS_idx, eRS_idx = np.sort([self.spc_file.get_idx(sRS), self.spc_file.get_idx(eRS)])
    # x軸取得（master_y_list は使われる前にアップデートされる）
    umx_x_list, master_y_list = self.spc_file.get_data(sRS, eRS, 0)
    n_data_points = len(umx_x_list)
    n_spectrum = 5
    # デコンボ素材：@cfp より、background を取得
    cfp_loc = self.spc_file.log_dict[b"point_of_interest_dict"].get("@cfp", None)
    if cfp_loc is not None:
        sub_idx = self.spc_file.get_sub_idx(*cfp_loc)
        cfp_spectrun = np.copy(self.spc_file.sub[sub_idx].y[sRS_idx:eRS_idx + 1])
        # signal to baseline と同じ手法でで bg を除く（引いても引かなくても結果は定数倍にしかならない（はず）。スタンダードから引いておいたほうが結果が見やすい。）
        if not no_baseline_for_added:
            cfp_spectrun -= np.linspace(cfp_spectrun[0], cfp_spectrun[-1], num=n_data_points)
    else:
        # プログレスバー処理
        self.pbar_widget.master_close()
        raise Exception("Point of interest named '@cfp' is required!")
    # matrix A
    slope_list1 = umx_x_list - umx_x_list.min()   # slopeは常に正の値
    slope_list2 = umx_x_list.max() - umx_x_list   # 増減が逆のsloopeも常に正
    regional_y_matrix = np.empty((n_data_points, n_spectrum))    # n_spectrum: [ref_spectrum, background, intercept, slope1, slope2]
    # regional_y_matrix[:, 0] is dynamically set.
    regional_y_matrix[:, -4] = cfp_spectrun
    regional_y_matrix[:, -3] = -1
    regional_y_matrix[:, -2] = slope_list1
    regional_y_matrix[:, -1] = slope_list2
    # 面積格納庫：これに高さを掛けた値が、エリア値となるわけよ。
    x_range = np.ptp(umx_x_list)
    x_diff_list_half = np.absolute(np.diff(umx_x_list)) / 2   # 追加スペクトル依存的な基本面積を求めるのに必要
    basic_area_values = np.empty(n_spectrum - 1, dtype=float)   # conc. については、basic_area_values がダイナミックに決まるため、別処理する。
    basic_area_values[-4] = ((cfp_spectrun[1:] + cfp_spectrun[:-1]) * x_diff_list_half).sum()
    basic_area_values[-3] = -x_range                  # intercept
    basic_area_values[[-2, -1]] = x_range ** 2 / 2    # slope
    # アンミキシング
    umx_height_matrix = np.empty((self.spc_file.fnsub, n_spectrum), dtype=float)
    conc_list = np.zeros(self.spc_file.fnsub, dtype=float)
    conc_area_x_height_list = np.empty(self.spc_file.fnsub, dtype=float)
    # interpする場合は元のデータのxは昇順である必要がある
    order = np.argsort(cspc_file.x)
    x_list = cspc_file.x[order]
    # c_range = (min(cspc_file.conc_c_list), max(cspc_file.conc_c_list))

    # pval, rnorm ###
    p_val_set = np.empty((self.spc_file.fnsub, n_spectrum - 1), dtype=float)   # remove slope 2 from (peak, background, slope1, slope2, intercept) to dodge Multicollinearity
    rnorm_set = np.empty((self.spc_file.fnsub, 3), dtype=float) # lpc_signal^2, cfp_signal^2, rnorm
    cfp_power = (cfp_spectrun ** 2).sum()
    ##########

    # ループ
    for idx, sub in enumerate(self.spc_file.sub):
        master_y_list = sub.y[sRS_idx:eRS_idx + 1]
        # 最小化する関数
        def func(input_conc):
            regional_y_matrix[:, 0] = np.interp(umx_x_list, x_list, cspc_file.conc2spectrum(input_conc)[order])
            coefficients, rnorm = nnls(regional_y_matrix, master_y_list)
            return rnorm
        # 最小化
        res = minimize_scalar(func)#, bounds=c_range, method="bounded") # "bounded" method does not seem to return best answer.
        # 再計算し、係数（coefficients）を求める
        regional_y0_list = np.interp(umx_x_list, x_list, cspc_file.conc2spectrum(res.x)[order])
        regional_y_matrix[:, 0] = regional_y0_list
        coefficients, rnorm = nnls(regional_y_matrix, master_y_list)
        umx_height_matrix[idx, :] = coefficients
        conc_list[idx] = res.x
        conc_area_x_height_list[idx] = ((regional_y0_list[1:] + regional_y0_list[:-1]) * x_diff_list_half).sum() * coefficients[0]

        # pval ### ls_analysis(A, b, x_hat, Var_pre, d_freedom)
        p_val_set[idx, :] = ls_analysis(A=regional_y_matrix, x_hat=coefficients, b=master_y_list)
        rnorm_set[idx, 0] = (regional_y0_list  ** 2).sum() * coefficients[0] ** 2
        rnorm_set[idx, 1] = cfp_power * (coefficients[1] ** 2)
        rnorm_set[idx, -1] = rnorm ** 2
        ##########

        # プログレスバー処理
        if idx in segment_list:
            self.pbar_widget.addValue(1)
        else:
            self.pbar_widget.setLabel2("{0} out of {1}".format(idx, self.spc_file.fnsub))
        print('\r{0} out of {1}'.format(idx, self.spc_file.fnsub), end='')
    # 面積処理
    area_list_set = umx_height_matrix[:, 1:] * basic_area_values[np.newaxis, :]    # (self.spc_file.fnsub, n_spectrum - 1): cfp, intercept, slope1, slope2
    area_list_set = np.concatenate((
        # area_values
        conc_list[:, np.newaxis],                           # conc values
        conc_area_x_height_list[:, np.newaxis],             # LPC シグナル
        area_list_set[:, -4:-3],                            # cfp シグナル
        area_list_set[:, -3:].sum(axis=1)[:, np.newaxis],   # baselineシグナル
        (area_list_set[:, -4:].sum(axis=1) + conc_area_x_height_list)[:, np.newaxis],  # LPC + cfp + baseline シグナル
        p_val_set[:, :2],                                   # p_values for LPC, cfp
        rnorm_set                                           # LPC_power, cfp_power, rnorm
    ), axis=1)                                      # conc., conc_area_x_height_list, cfp, baseline, total, p_values_LPC, p_values_cfp, LPC_power, cfp_power, rnorm
    # 面積値代入
    optional_name_list = ["concentration", "LPC_area", "background", "baseline_drift", "total_signal", "p_val(LPC)", "p_val(cfp)", "LPC(power)", "background(power)", "rnorm"]
    optional_id_list = ["conc", "1", "2", "bd", "ts", "1p", "2p", "1pow", "2pow", "rnorm"]
    line_idx_list = [0, 0, 1, -2, -1, 0, 1, 0, 1, -1]
    item_list = [
        draw.Image2D(
            np.reshape(area_list, self.spc_file.get_shape()).T, 
            name="unmixed_{0}-{1}_{2}".format(sRS, eRS, optional_id)
        ) for area_list, optional_id in zip(area_list_set.T, optional_id_list)]
    # map データ準備
    content = "map"
    umx_class = draw.AddedContent_Unmixed
    unmixed_data_list = []
    for optional_id, line_idx in zip(optional_id_list, line_idx_list):
        unmixed_data = draw.UnmixedData(
            abs_id = self.abs_id, 
            standard_type = optional_id, 
            line_idx = line_idx, 
            umx_x_list = umx_x_list, 
            umx_y_matrix = regional_y_matrix,   # shape:(len(umx_x_list), n_spectrum)
            umx_h_matrix = umx_height_matrix,   # shape:(fnsub, n_spectrum)
            conc_list = conc_list,              # shape:(fnsub,)
            cspc_file = cspc_file
        ) 
        unmixed_data.get_y_data_matrix = types.MethodType(get_y_data_matrix, unmixed_data)
        unmixed_data.get_line_data_list = types.MethodType(get_line_data_list, unmixed_data)
        unmixed_data.get_region_data_list = types.MethodType(get_region_data_list, unmixed_data)
        unmixed_data_list.append(unmixed_data)
    # ボタン追加
    for item, optional_name, unmixed_data in zip(item_list, optional_name_list, unmixed_data_list):
        self.parent.toolbar_layout.add_content(
            umx_class(
                item=item, 
                info={"content":content, "type":"unmixed", "detail":optional_name, "draw":"func", "data":[sRS, eRS], "advanced_data":unmixed_data}, 
                parent_window=self.parent
            )
        )
    # プログレスバー処理
    self.abs_id += 1
    self.pbar_widget.is_close_allowed = True
    self.pbar_widget.close()
# UnmixedData 用関数
def get_y_data_matrix(self, sub_idx):
    order = np.argsort(self.cspc_file.x)
    self.umx_y_matrix[:, 0] = np.interp(self.umx_x_list, self.cspc_file.x[order], self.cspc_file.conc2spectrum(self.conc_list[sub_idx])[order])
    y_matrix = self.umx_y_matrix * self.umx_h_matrix[sub_idx]
    bd_matrix = y_matrix[:, -3:].sum(axis=1, keepdims=True)
    y_data_matrix = np.empty((len(self.umx_x_list), self.N_lines()), dtype=float)
    y_data_matrix[:, :-2] = y_matrix[:, :-3] + bd_matrix
    y_data_matrix[:, -2]  = bd_matrix[:, 0]         # bd
    y_data_matrix[:, -1]  = y_matrix.sum(axis=1)    # ts
    return y_data_matrix
def get_line_data_list(self, sub_idx, original_spc_file=None):
    return [(self.umx_x_list, y_data) for y_data in self.get_y_data_matrix(sub_idx).T]
def get_region_data_list(self, sub_idx, original_spc_file=None):
    order = np.argsort(self.cspc_file.x)
    self.umx_y_matrix[:, 0] = np.interp(self.umx_x_list, self.cspc_file.x[order], self.cspc_file.conc2spectrum(self.conc_list[sub_idx])[order])
    y_matrix = self.umx_y_matrix * self.umx_h_matrix[sub_idx]
    # bottom_line
    print(self.standard_type, self.standard_type == "rnorm")
    if self.standard_type in ("bd", "ts"):
        btm_line = pg.PlotDataItem(self.umx_x_list[[0, -1]], [0, 0], fillLevel=0, pen=gf.mk_u_pen())
    elif self.standard_type == "rnorm":
        x_list, y_list = original_spc_file.get_data(self.umx_x_list[0], self.umx_x_list[-1], sub_idx=sub_idx)
        btm_line = pg.PlotDataItem(x_list, y_list, fillLevel=0, pen=gf.mk_u_pen())
    else:
        btm_line = pg.PlotDataItem(self.umx_x_list[[0, -1]], y_matrix[[0, -1], -3:].sum(axis=1), fillLevel=0, pen=gf.mk_u_pen())
    # top line
    if self.standard_type == "bd":
        top_line = pg.PlotDataItem(self.umx_x_list, y_matrix[:, -3:].sum(axis=1), fillLevel=0, pen=gf.mk_u_pen())
    elif self.standard_type in ("ts", "rnorm"):
        top_line = pg.PlotDataItem(self.umx_x_list, y_matrix.sum(axis=1), fillLevel=0, pen=gf.mk_u_pen())
    else:
        top_line = pg.PlotDataItem(self.umx_x_list, y_matrix[:, [self.line_idx, -3, -2, -1]].sum(axis=1), fillLevel=0, pen=gf.mk_u_pen())
    return [(btm_line, top_line)]
# argmin_x ||Ax - b||
# 片側 5% 検定
# def ls_stat_pre(A):
#     mod_A = np.delete(A, -2, axis=None)    # slopeが2つ出てくると多重共線性が出てきてしまう。
#     N_data, N_var = mod_A.shape
#     d_freedom = N_data - N_var
#     Var_pre = np.diag(np.linalg.inv(np.dot(mod_A.T, mod_A))) / d_freedom
#     return Var_pre, d_freedom
def ls_analysis(A, x_hat, b):
    A_mod = A[:, :-1]
    x_hat_mod = np.hstack((x_hat[:-3], [x_hat[-3] - np.max(A[:, -2]) * x_hat[-1]], [x_hat[-2] -  x_hat[-1]]))      # slopeが2つ出てくると多重共線性が出てきてしまう。
    # 1st section
    N_data, N_var = A_mod.shape
    d_freedom = N_data - N_var
    Var_pre = np.diag(np.linalg.inv(np.dot(A_mod.T, A_mod)))
    # 2nd section
    e = np.dot(A_mod, x_hat_mod) - b
    SE = np.sqrt(Var_pre / d_freedom * np.dot(e, e.T))
    t_vals = np.divide(x_hat_mod, SE)
    p = t.cdf(-np.absolute(t_vals), df=d_freedom)
    # btm = x_hat - t.ppf(0.975, df=d_freedom) * SE
    # top = x_hat + t.ppf(0.975, df=d_freedom) * SE
    # btm95 = x_hat - t.ppf(0.95, df=d_freedom) * SE
    return p    #, btm95, SE, t_vals

###
###
###

# 範囲決定
current_focused_window = self.current_focused_window
if current_focused_window.window_type != "ms":
    raise Exception("invalid window type")

seRS = self.temp_variables.get("range", None)
if seRS is None:
    range_setting_popup = popups.RangeSettingsPopup(initial_values=(2000,2300))
    done = range_setting_popup.exec_()
    if done == 0:
        raise Exception("process was canceled")
    else:
        sRS = range_setting_popup.spbx_RS1.value()
        eRS = range_setting_popup.spbx_RS2.value()
        self.temp_variables["range"] = (sRS, eRS)
else:
    sRS, eRS = seRS

unmixing(current_focused_window.spectrum_widget, sRS, eRS)

# spectrum_widget に追加するのは、ただの見栄えw
cfp_loc = current_focused_window.spectrum_widget.spc_file.log_dict[b"point_of_interest_dict"]["@cfp"]
plot_data_item = pg.PlotDataItem(cspc_file.x, cspc_file.sub[0].y, fillLevel=0)
current_focused_window.spectrum_widget.replace_spectrum(*cfp_loc)
current_focused_window.toolbar_layout.add_current_spectrum()
current_focused_window.toolbar_layout.add_plot_data_item(plot_data_item, detail="from macro", data="", spc_file=cspc_file)






