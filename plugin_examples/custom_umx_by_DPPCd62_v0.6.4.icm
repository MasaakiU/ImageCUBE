
custom_spc_data = """# cspc
# x
2000.1521347617727 2001.588824812007 2003.0255148622412 2004.4622049124755 2005.8988949627096 2007.335585012944 2008.772275063178 2010.2089651134122 2011.6456551636466 2013.0823452138807 2014.519035264115 2015.9557253143491 2017.3924153645835 2018.8291054148176 2020.265795465052 2021.702485515286 2023.1391755655202 2024.5758656157545 2026.0125556659887 2027.449245716223 2028.8859357664571 2030.3226258166915 2031.7593158669256 2033.19600591716 2034.632695967394 2036.0693860176284 2037.5060760678625 2038.9427661180966 2040.379456168331 2041.816146218565 2043.2528362687995 2044.6895263190336 2046.126216369268 2047.562906419502 2048.9995964697364 2050.4362865199705 2051.8729765702046 2053.309666620439 2054.746356670673 2056.1830467209074 2057.6197367711416 2059.0564268213757 2060.4931168716103 2061.9298069218444 2063.3664969720785 2064.8031870223126 2066.2398770725467 2067.6765671227813 2069.1132571730154 2070.5499472232495 2071.986637273484 2073.423327323718 2074.8600173739524 2076.2967074241865 2077.7333974744206 2079.170087524655 2080.606777574889 2082.0434676251234 2083.4801576753575 2084.9168477255917 2086.353537775826 2087.7902278260603 2089.2269178762945 2090.6636079265286 2092.1002979767627 2093.5369880269973 2094.9736780772314 2096.4103681274655 2097.8470581777 2099.2837482279338 2100.7204382781683 2102.1571283284025 2103.5938183786366 2105.030508428871 2106.467198479105 2107.9038885293394 2109.3405785795735 2110.7772686298076 2112.213958680042 2113.6506487302763 2115.0873387805104 2116.5240288307446 2117.9607188809787 2119.3974089312132 2120.8340989814474 2122.2707890316815 2123.707479081916 2125.1441691321497 2126.5808591823843 2128.0175492326184 2129.4542392828525 2130.890929333087 2132.327619383321 2133.7643094335554 2135.2009994837895 2136.6376895340236 2138.074379584258 2139.5110696344923 2140.9477596847264 2142.3844497349605 2143.8211397851946 2145.257829835429 2146.6945198856633 2148.1312099358975 2149.567899986132 2151.0045900363657 2152.4412800866003 2153.8779701368344 2155.3146601870685 2156.751350237303 2158.1880402875368 2159.6247303377713 2161.0614203880054 2162.4981104382396 2163.934800488474 2165.3714905387083 2166.8081805889424 2168.2448706391765 2169.6815606894106 2171.118250739645 2172.5549407898793 2173.9916308401134 2175.428320890348 2176.8650109405817 2178.3017009908162 2179.7383910410504 2181.1750810912845 2182.611771141519 2184.0484611917527 2185.4851512419873 2186.9218412922214 2188.3585313424555 2189.79522139269 2191.2319114429242 2192.6686014931583 2194.1052915433925 2195.5419815936266 2196.978671643861 2198.4153616940953 2199.8520517443294 2201.288741794564 2202.7254318447976 2204.162121895032 2205.5988119452663 2207.0355019955005 2208.472192045735 2209.908882095969 2211.3455721462033 2212.7822621964374 2214.2189522466715 2215.655642296906 2217.09233234714 2218.5290223973743 2219.9657124476084 2221.4024024978426 2222.839092548077 2224.2757825983113 2225.7124726485454 2227.1491626987795 2228.5858527490136 2230.022542799248 2231.4592328494823 2232.8959228997164 2234.332612949951 2235.769303000185 2237.2059930504192 2238.6426831006534 2240.0793731508875 2241.516063201122 2242.952753251356 2244.3894433015903 2245.8261333518244 2247.2628234020585 2248.699513452293 2250.136203502527 2251.5728935527613 2253.0095836029955 2254.4462736532296 2255.882963703464 2257.3196537536983 2258.7563438039324 2260.193033854167 2261.629723904401 2263.066413954635 2264.5031040048693 2265.9397940551034 2267.376484105338 2268.813174155572 2270.2498642058063 2271.6865542560404 2273.1232443062745 2274.559934356509 2275.996624406743 2277.4333144569773 2278.870004507212 2280.3066945574456 2281.74338460768 2283.1800746579142 2284.6167647081484 2286.053454758383 2287.490144808617 2288.926834858851 2290.3635249090853 2291.8002149593194 2293.236905009554 2294.673595059788 2296.1102851100222 2297.5469751602564 2298.9836652104905 2300.420355260725
# conc_c_list
0.0 2.0 4.0 6.0 8.0
# y_set(210,5)
0.0 0.0 0.0 0.0 0.0 0.0006218283034659046 0.0015806314798310042 0.0002705892721789234 0.0013301411168110929 0.003702498272075575 0.0011255034069365226 0.002229719888958513 0.0016672222638713834 0.0013912574054196006 0.0023634630893843286 0.0025775836053438944 0.003194655208726126 0.0024714879331075813 0.0021438758561474047 0.002891066158227932 0.004103352724377099 0.004382524637937737 0.0035652899676409137 0.004325952663659516 0.0045896772373175045 0.005507821507418076 0.005279392077719637 0.004510836552749356 0.004617844628844124 0.004205300908431665 0.007004227560666142 0.0064519279197988895 0.005754958084796563 0.004861431645169313 0.004152370412822914 0.008544752902682208 0.008214194808422774 0.0071379871583505585 0.006571232709636912 0.006112919580766393 0.009900622403423164 0.009577111014868307 0.007969303327311498 0.007692586348700227 0.009099830334294382 0.01113370467829961 0.01081297026942373 0.008313975467884087 0.007752071348925088 0.011138089891250834 0.012326378040578654 0.012191991251920792 0.00926576064198976 0.009005794428307502 0.008923365100075693 0.013682635564330956 0.012905452958980629 0.0112869911261633 0.010697350353160526 0.01114595730559977 0.014254780249484006 0.014273752495532805 0.012564821086939012 0.012023043451595059 0.011672103439366501 0.014711186811626432 0.014981978220243433 0.012283394447784972 0.012659560605534132 0.012226491068518516 0.015667993869929762 0.015860775829555668 0.013741814829143176 0.014696181401267557 0.01391176803843526 0.016279549259332997 0.01681623410903505 0.015004084300712239 0.01453740953442901 0.0168670917642624 0.01751086032173161 0.01775153755936861 0.017020659646205555 0.016268402396106243 0.016254279696189405 0.01864767513551063 0.019080795343004085 0.018544587771066143 0.01812305597795913 0.018750434234449574 0.019788126109072206 0.020688073200495243 0.019604426814764347 0.019212345624637923 0.02076867216010784 0.020991990678328798 0.021806188159458402 0.020904329986306876 0.020494708877952347 0.02202944651032564 0.022545306150903832 0.022928492863870165 0.022707927515940845 0.022087020774478154 0.023076321623244137 0.024127819145287964 0.024386860097443196 0.0239245587806943 0.023128583265912488 0.02398134152887244 0.025417871629615237 0.026065606596920525 0.024641775438011153 0.02373960708130335 0.025226650195914486 0.02700193516298786 0.02752803074154324 0.025976783292942406 0.02506861879287814 0.025532389294424578 0.028373076284661507 0.028538851332715803 0.026771829772463587 0.025765577195621343 0.026059852406151544 0.02956113514316145 0.03019132739453447 0.027638381878558348 0.028039722491043167 0.027005711487309653 0.031508056823443424 0.03189471681402373 0.03011877164209962 0.028224465446810176 0.029464997188596215 0.032961568130313895 0.033517119803612466 0.03155728000690415 0.03062427124010305 0.029458236282615166 0.03459721676052536 0.034519851024647566 0.03178719955489763 0.03152907342739783 0.030521848829803813 0.036438680836755416 0.03691895731373135 0.034290209205340386 0.03308000770795656 0.03440570866957729 0.03902749781677456 0.03955844701911879 0.037984294937206356 0.03576973136698817 0.03757403906422707 0.041493528290867596 0.04279991640752666 0.04120774432023516 0.03912430311396385 0.04195261016766938 0.04518584355281535 0.04670932003164102 0.04521304498517323 0.04429755629506642 0.046271836038180345 0.04916877073159405 0.05139609886708015 0.05044558412480517 0.049551184035909995 0.050069428303864516 0.05429495926657957 0.05689927029235973 0.056270614961953624 0.05514242286409376 0.05528742034651104 0.06110444111705232 0.06393070817565144 0.06496093810833864 0.06362473796239174 0.06355980146260459 0.0689541875654261 0.07237600285556733 0.07503625979212647 0.07377635938104136 0.07344466117570371 0.07768353435759143 0.0819183863311162 0.08519549299603271 0.0848143489743805 0.08464703019819499 0.08798107607701386 0.09471758584615239 0.09888574716734394 0.09997825067308072 0.09940529635433168 0.10026434236579046 0.10865095358231139 0.11515396100180642 0.11576935486051625 0.11511915285843569 0.11402358662767215 0.1235695466493416 0.132777013569988 0.1339451775798597 0.13409405288938125 0.127826130338565 0.13930303395767923 0.14966257067628091 0.15057296344250876 0.1502800047756411 0.14255821730129103 0.1556111919847632 0.16701370897348689 0.16804831132568676 0.1692688574305118 0.15980463194510455 0.17294294774744218 0.18503330829572323 0.18611006884724524 0.1856684555209323 0.18095018202430252 0.1936020670803184 0.20559623380572958 0.2058649738459967 0.2063711463489189 0.20565219712640842 0.21904568259824686 0.22822349995602031 0.22908129178421577 0.23160054712790532 0.2374526227210232 0.2493609652423811 0.2574769696080489 0.25661966465274827 0.2583891695082021 0.2768310630603937 0.28676943285289 0.29367594170452355 0.29115325650152935 0.295787658904925 0.3201422876326525 0.3278131106378131 0.33085659745255985 0.32854340055065656 0.3334248972141429 0.36235341923121156 0.36588464451181957 0.36205612311193935 0.3592930543915723 0.36237777589395254 0.39337411637834974 0.3918495364629163 0.38150745248122364 0.37671626350990245 0.37771872499104453 0.4075835461644999 0.40351635876960434 0.3902071228780839 0.38323256506304926 0.38316886962592855 0.40836499471332943 0.4050542656381669 0.39300487234238424 0.38660559530964916 0.3859615704651624 0.3986356395121369 0.39768763302836196 0.3921253878016405 0.3872199994778335 0.38805033700786473 0.383471899033623 0.3874313329658273 0.38915550666610355 0.3852741310427291 0.3861698305157292 0.3655934217170186 0.3740681322478448 0.38237233623753897 0.3789730307421969 0.37786256159099657 0.35254040693739463 0.3668482949177309 0.3794675171252025 0.376853824678422 0.37545416994199365 0.3460496454528723 0.3626375982924732 0.37838154991836825 0.37963496730208357 0.377784684150595 0.3455485512958957 0.3650675365782925 0.3815022154435231 0.3841927041370661 0.3812407858179979 0.35302322858303264 0.3735518071327701 0.3923977093161837 0.39131955461970425 0.39361285652012235 0.3659503006765541 0.3878201445381663 0.4063474654424002 0.40592547415076197 0.41024979287638264 0.3882580593503409 0.4103586620294114 0.42701669410712 0.4286289231945908 0.42864013638584075 0.41917776255756145 0.4399765450939914 0.45403394057407914 0.45549920823960643 0.4532468373955931 0.45765698104319785 0.477185070386438 0.4867318022799404 0.48858029608996056 0.4861961740964713 0.5064407325803334 0.5229977751251305 0.5283410452402825 0.5263991380119489 0.528431944745229 0.5637809025688982 0.5774021845885575 0.5761918883520907 0.5719977347460055 0.5743905436187069 0.6296737077507307 0.6379754637235235 0.6284507717848755 0.6233726866953355 0.6255347324900771 0.7034096225432291 0.7051366522914367 0.6853573345359207 0.6781866300296799 0.6826892332032963 0.7810941048809592 0.7768368728423023 0.749159287649484 0.7382380837397321 0.7417471341991071 0.8586212873346779 0.8507907543363802 0.8152660329641446 0.8016223355406602 0.8030849005169826 0.9283543641538663 0.918680714457443 0.8785767720983084 0.8643108550211023 0.8662369273278188 0.9785949812128792 0.969764069259544 0.9334042742147434 0.919070615817928 0.9235848492421803 0.9991879951093399 0.996049981839283 0.9719132173248684 0.960120551553385 0.9615050917216632 0.9918309835543977 0.9996922891929314 0.994832427144939 0.9880024682662572 0.9919299922349211 0.9576354247396598 0.9827144976559496 0.9985218480217353 0.999685135240342 0.999434326199441 0.9053589510951622 0.9452214560166674 0.9790172650735932 0.9864935318417507 0.9881291526202023 0.8496700445153497 0.8999546349860292 0.9492198290177971 0.9629074256057655 0.9648666478552835 0.7892085104963252 0.8475693484228102 0.9086499965796639 0.9245687928380184 0.927597115792469 0.7298527536841304 0.7949463593384247 0.8646211668028665 0.8841149374350382 0.8842266908917749 0.6747191441572462 0.7453034851241656 0.8228367464318391 0.8449960918417087 0.8449948570745109 0.6245113297785568 0.6989620904453804 0.7837831575102463 0.8074854465285055 0.8088366861552833 0.5774871583541055 0.6538107426275039 0.7425759196187179 0.7656752771254272 0.769367870283141 0.537248245293918 0.6147642497336281 0.7055025467843951 0.7286094336091887 0.7329987195087053 0.5042556203786421 0.5817870668073408 0.6735685323731195 0.6985179739741982 0.7007154319187909 0.47551169831755763 0.5520396344414158 0.6431218215169449 0.6693470789560654 0.6693624615074776 0.4512408299811149 0.5264691798605885 0.6145482766732007 0.6404763256003496 0.6404680967639431 0.4272826855154145 0.49894081551446545 0.5821679704094491 0.6057805955561095 0.6057998168200116 0.4048131905313893 0.47163305726577576 0.5487435975454249 0.5711636824564001 0.5711579205424229 0.3870923848847916 0.4491660903914299 0.5231529218433973 0.5423410171283086 0.5424582094780739 0.3684869063720626 0.4262949523255692 0.4934146443644673 0.5113424672334995 0.5129587056504642 0.3510948268126217 0.4049594812015048 0.4673679275930769 0.48397046405254923 0.4866417934247803 0.33658811366735936 0.3864833751289096 0.44420705695385065 0.4594259333809355 0.4602592779876661 0.3252740290157684 0.372937533946759 0.4283942263686044 0.44262266672944117 0.44529114268453596 0.31294402350519845 0.3595232684708842 0.41164296189395616 0.42298233866208323 0.4250511506704524 0.30698453174372264 0.35163637542179926 0.4015784410536125 0.4133884075683768 0.4152912997562694 0.30291298283478846 0.34529991797152076 0.392290130389654 0.40367843407098425 0.40376814234938185 0.2998223264596319 0.33872016898123397 0.382702186956947 0.393234494366144 0.3939334646823641 0.29558671152543037 0.3325033855947802 0.3722371484129464 0.38290178910811246 0.3835025297634563 0.2908734716772611 0.32614421411956207 0.36282149100804606 0.3732568280668107 0.3745764531126532 0.2841195889745284 0.317469762158479 0.35175124372940936 0.3621522307273511 0.36349953410082003 0.2758926672839095 0.30793632166368345 0.3405132769245532 0.3501838695997449 0.35165195731370236 0.26710844153041324 0.29775701858651293 0.33077445223405844 0.3387795893897155 0.34235568699797514 0.2573789518314278 0.28752641142976315 0.3217035061279874 0.32987415442467966 0.3348272890390132 0.24861819348417494 0.2799480550871657 0.31535644933892426 0.32434930363634057 0.3303128732502204 0.2408006389921395 0.27320112967490096 0.3106815039211538 0.3202433323787644 0.32499685731741257 0.23481171593914774 0.26963434774025846 0.30923379959838204 0.31953780033220935 0.3237500714221013 0.2299784330355681 0.266490789155474 0.3085571708785766 0.3186712467986934 0.32298778210648527 0.2276577059614801 0.2656152064385868 0.3081381018327176 0.320763641190147 0.3220652038639662 0.22682161956194336 0.26674458698586534 0.3093702043339758 0.325297326084229 0.3257238084451234 0.22732826027090608 0.26958482361124775 0.31315838813686225 0.3289588140884854 0.3314198399693129 0.22866885621937744 0.2714467195463517 0.3176667778666229 0.3338084387997296 0.33410747800300594 0.2325615835042922 0.2766960253455476 0.3258024095069214 0.34018143543280266 0.3443432322613893 0.23575129220544722 0.28040292937097777 0.3310096773334563 0.34477553280135814 0.3503810888896254 0.237965196395362 0.2822239343988719 0.3308272375268256 0.34631006466489417 0.3477625694256642 0.2414322705621848 0.2856717028476423 0.3344731885391531 0.34796454102045693 0.3500138817693068 0.24520295553694682 0.28922611685785093 0.3379011593361312 0.35024982243505665 0.3546753416786001 0.24805714006784121 0.29141795881488924 0.3399199309126083 0.35293550582375954 0.3566032880283149 0.25007113393801583 0.2934081449570074 0.34175433445073317 0.3554766085635287 0.35866003169836674 0.25224669565501234 0.29611122198660816 0.3442606497210835 0.35909643087949533 0.36250969948753 0.25386884935201215 0.29723370857160836 0.34520824780432524 0.36054989133020177 0.3649063255502884 0.25504660287415665 0.2977197471534746 0.34337576164842865 0.3599593450954436 0.3644967359354668 0.2576364983431707 0.3009950242805123 0.34535178668308975 0.36313777097512034 0.3677746914838911 0.26169948466011644 0.30571046408564095 0.3535839905975934 0.36987343882524165 0.37695485193962863 0.2654627472038423 0.3087697789020679 0.3583150173358103 0.37491803924464484 0.3820005711379049 0.26754893279110337 0.3106818896891511 0.35986665309285026 0.3773450245141573 0.3842982994009849 0.2661410793053659 0.30921093850297254 0.3548509768184007 0.3723913353468032 0.38042319816590425 0.2602797514502273 0.29764182492088576 0.33904817801011605 0.3561595049282251 0.36581054783852457 0.25132009864504895 0.28277305716725765 0.31998921906414357 0.3341380030046469 0.3445281361951983 0.24292876004915975 0.2721220937217247 0.3062796378991911 0.3208088917060111 0.33217761129125273 0.23901058939017295 0.2669145084686019 0.2977391109292289 0.31255163831461946 0.32626120124408603 0.24008820087561494 0.26759518556463 0.2971249962207859 0.3110762014261058 0.3232505337898032 0.24591954783836506 0.27343547903644505 0.3014693689514215 0.31489986651864366 0.3288436097688874 0.2549865823861886 0.2816774634429422 0.30878785304816614 0.32264779888217754 0.3347733417445643 0.2646995062995966 0.2906202316624192 0.31515434567152234 0.32725841862014793 0.3378902594725527 0.2757577969032341 0.30138768355383655 0.32514110652381034 0.3359550540093309 0.3479163887286148 0.2883431844010364 0.31329767442543077 0.33540606056354644 0.3442402225433025 0.356946595181554 0.300429479337165 0.32449842447671584 0.34517519664434876 0.3539318583891102 0.3635063663718163 0.3101060292360487 0.33300088456372756 0.3534962006277751 0.3618946217153977 0.3703218203082669 0.3134090845053749 0.3357392490081396 0.3564087153637124 0.364702739697196 0.3736309332189522 0.3081373157640338 0.33191465744636517 0.35365507298928045 0.3620577535063707 0.37078399147177943 0.29464794611113915 0.32132583629039013 0.3461819799511789 0.3542200415541647 0.36061981004749255 0.2752353713150376 0.304101572931217 0.33351026635067593 0.34227597155189704 0.3482881154117533 0.2526233413942638 0.28283669567237874 0.315573814266809 0.3259305145524321 0.3342548550757881 0.22873804165547582 0.2601955187966117 0.2939405133081695 0.30508164123932413 0.31118900219483026 0.20732955364583694 0.23844480619028882 0.27356090685595574 0.28377443898575766 0.29041790914850085 0.18831963446146577 0.21995370311131146 0.25517611187584993 0.26536917271565685 0.27098387450505634 0.17351001126202167 0.2052484486062472 0.24034541630900302 0.2515410646573186 0.25708673481963573 0.16240566851399868 0.19285503277108937 0.22903447159298085 0.23942518764770393 0.24650022847980424 0.15238493689354396 0.18296905539253755 0.21848118586988263 0.22950282739091316 0.232709989174972 0.1456377700604139 0.17470372133460965 0.21128921979651846 0.22282008119140484 0.2280107021640777 0.13850039757108745 0.16823247241082523 0.20274629238031633 0.2142896675391059 0.2188770917225722 0.13084310088429746 0.16009238388187447 0.19449455227188717 0.20524040947551755 0.2107452116274337 0.12293639110298503 0.1513872177375252 0.1846998765961132 0.19467355731232938 0.20039708538398565 0.11484197812783382 0.14090761233617066 0.1741703005381999 0.183231408035862 0.18900316821422247 0.10573544387041331 0.13020913830659603 0.16110719817551852 0.1696119788876589 0.1760557178049793 0.09690299447730044 0.12024176668713932 0.1472732942010524 0.15537417346672341 0.16067451884509104 0.08889736777383758 0.11048397353262815 0.13429711137787662 0.14121060689395626 0.14664496351423195 0.08165398112907246 0.10130452451893673 0.12295338845234247 0.12871491880757305 0.13392157544196176 0.07477937808988419 0.09290850865499105 0.11208866741891767 0.11712253286601994 0.1240232862574083 0.06890370371410279 0.08589920853184019 0.1036154020743017 0.10853264858367546 0.11538167425947515 0.06400138662652767 0.0802075612719888 0.09676053082771148 0.10114114593149864 0.10707237498330258 0.05917980599951904 0.07460546419786562 0.08922776695038301 0.09423673471622193 0.09776373693420895 0.05487050045515847 0.0696729462223579 0.0831147308971637 0.08816092207304851 0.09067234727406373 0.0508158913778549 0.06582974979164319 0.07846036700195565 0.08310232174339485 0.08686930781828506 0.047065346319598425 0.06201838557272227 0.07380504651657303 0.07854079432462316 0.08433992698742732 0.04432996056467512 0.05852692095356511 0.07024762838297585 0.07427393988857758 0.0806186336912397 0.04185524310960077 0.05524674791387933 0.06653214713592802 0.07135808990100762 0.07503595627224416 0.03951759085622269 0.052192308542293425 0.06330374831324141 0.06710294645240268 0.07225640981589199 0.03711202477033933 0.04910157334364396 0.05903540714261782 0.06340938621805796 0.06673624848380502 0.03449503106786435 0.04689501971166526 0.05573801396058599 0.058988530582147716 0.06300910683976343 0.03285853627710206 0.044904902820029576 0.05437610438313242 0.05718274472744375 0.05989111276192796 0.031051695391882003 0.042887528996679705 0.051461655290679094 0.052887933755164235 0.05669333368110969 0.029429447242193048 0.04016375192402143 0.04783457874523493 0.048712087900925946 0.05440608026953746 0.028649768163552122 0.03837130982558069 0.04655668186233125 0.04711842815090257 0.052922726883341514 0.02679287528464623 0.03674939008015693 0.04369811942744585 0.04636060924350437 0.04750484533019156 0.025576337815461682 0.034909572722154655 0.041315514802166706 0.043551166350651746 0.04756850165978352 0.024749727726202063 0.0329096627179046 0.03995643386233273 0.04128203189892335 0.04464457741630451 0.02387967134083782 0.031423754684065816 0.03792141239053582 0.03875244280594016 0.04061292599565198 0.022572356908496675 0.03009882153779736 0.03515056979554285 0.03647492596325866 0.03949151309468459 0.02159916473025203 0.02816988685143327 0.033018864176772286 0.03321448958168409 0.036987333873989725 0.020473103699553522 0.026628807840243587 0.029841991230988185 0.030560678407301638 0.03340773926985777 0.01959192260880583 0.025256295346606818 0.028312963934167212 0.02905030173870614 0.031000913657098526 0.019185805228529758 0.02428075929005628 0.02800329574610646 0.02777324303462985 0.030055955502163972 0.018321432305041956 0.02329545257072658 0.026243208558572748 0.026728386251851432 0.027792017662897288 0.0173005649890833 0.02203025838827343 0.023954763193154354 0.02367998833726041 0.02511104764750071 0.01657548241525042 0.02063783141871013 0.02204413480223757 0.02166116525044195 0.022595794229576777 0.01589248185996433 0.0198806588381878 0.02092517865977565 0.021282800777588255 0.021720533262276034 0.014885692420163854 0.019104009065618162 0.019726049461039598 0.021099980947956815 0.020243056158829965 0.013951630659400078 0.017648487333485376 0.018627858988749094 0.01883623928835301 0.018895093094957988 0.013100729745535647 0.016562991054030488 0.01764025439718096 0.01669745534016994 0.01756942402866914 0.012079199728037636 0.01565552325131779 0.016223138906794513 0.01622602880027537 0.01556123742593285 0.010871918053200038 0.014648874482798526 0.014180948566408245 0.014526947950895226 0.014265130876027675 0.010209250361372556 0.013304926103445615 0.01376587936347412 0.012865817522527488 0.01290430766721051 0.00963878922416854 0.012385936449434861 0.012939230250971798 0.013072205332320397 0.013431694775178023 0.009213625483526923 0.011313593167742334 0.01196302116049348 0.012503899724900062 0.012090355822343586 0.008689146162511992 0.010758107460284088 0.01101953828567806 0.01007164422926178 0.010098032094453452 0.00819165113886176 0.010157558108411784 0.008980564722979048 0.008524247126856357 0.007918149255965647 0.007992339257814791 0.009142932352935132 0.00915268816343964 0.00712692823199217 0.009343174467772063 0.007727807222496469 0.008937246165567746 0.009055249513896794 0.0072207451510681465 0.00830403314126924 0.007648371343128046 0.008514018394558657 0.008711970716473514 0.007434129793233945 0.010201233706820466 0.006706502266043916 0.007421419520693197 0.004579541414551284 0.0049767376530896 0.005811085184788336 0.006450388690685508 0.007692512334839703 0.005377914959125006 0.007790481674249061 0.007631509719472998 0.005870493365144638 0.006610221453459905 0.005022530597321899 0.005531789968472018 0.0064678644643235556 0.005004039028162519 0.005618042722188245 0.0022652844611253673 0.004565877933549653 0.0031016595378228254 0.003829454953865434 0.004506210007743036 0.0020044814893824484 0.0027242854563123606 0.003703183102590964 0.003051700578706823 0.003388397943797786 0.0017597824014784456 0.0030853443906666855 0.0023913954052538298 0.00205086449239141 0.0023572255619835345 0.0021514213975344725 0.0021062926328112128 0.0027419550663248466 0.0013655275581246685 0.0022022707879531976 -0.0006837549905086336 0.0017576663019514506 0.0015608918831291649 0.00048469691037896005 0.0011519403276141938 -9.72119793189243e-05 -0.00033954507884619624 0.0007293653374737898 0.0 0.0 0.0 0.0 0.0
# init_data(self):
    self.conc = 0
    self.contour = 0.1
    # prepare function to display data
    from scipy import interpolate            # PCHIP algorithm (Hermite interpolation)
    self.y_func_list = [interpolate.PchipInterpolator(self.conc_c_list, y_list) for y_list in self.y_set]
    # set initial data
    val_list = self.conc2spectrum(self.conc)
    self.add_sub(y_data=val_list)
    # add preprocess
    from PyQt5.QtWidgets import QLabel, QDoubleSpinBox, QPushButton, QFileDialog
    import numpy as np
    conc_c_min = self.conc_c_list.min()
    conc_c_max = self.conc_c_list.max()
    def init_widgets(self):
        # ウィジェット
        self.contour_label = QLabel(" contour ")  # 等高線
        self.contour_spbx = QDoubleSpinBox()
        self.contour_spbx.setDecimals(2)
        self.contour_spbx.setSingleStep(0.1)
        self.contour_spbx.setMinimum(conc_c_min)
        self.contour_spbx.setMaximum(conc_c_max)
        self.contour_spbx.setValue(self.parent_window.spectrum_widget.spc_file.contour)
        self.contour_spbx.setKeyboardTracking(False)
        self.conc_label = QLabel(" conc. ")
        self.conc_spbx = QDoubleSpinBox()
        self.conc_spbx.setDecimals(4)
        self.conc_spbx.setSingleStep(self.contour_spbx.singleStep())
        self.conc_spbx.setMinimum(conc_c_min)
        self.conc_spbx.setMaximum(conc_c_max)
        self.conc_spbx.setKeyboardTracking(False)
        self.conc_spbx.setValue(self.parent_window.spectrum_widget.spc_file.conc)
        self.btn_lut = QPushButton("lut")
        self.btn_lut.setFixedWidth(40)
        # イベントコネクト
        self.conc_spbx.valueChanged.connect(self.conc_spbx_value_changed)
        self.contour_spbx.valueChanged.connect(self.contour_spbx_changed)
        self.btn_lut.clicked.connect(self.set_lut)
        return [self.btn_lut, self.contour_label, self.contour_spbx, self.conc_label, self.conc_spbx]
    def conc_spbx_value_changed(self, event):
        spc_file = self.parent_window.spectrum_widget.spc_file
        spc_file.conc = event
        value_list = spc_file.conc2spectrum(event)
        spc_file.set_sub_data(sub_idx=0, y_data=value_list)
        self.parent_window.spectrum_widget.plotItem.vb.addedItems[0].setData(spc_file.x, value_list)
    def contour_spbx_changed(self, event):
        if np.allclose(event, 0):
            self.contour_spbx.setValue(self.contour_spbx.singleStep())
            return
        # set data
        spc_file = self.parent_window.spectrum_widget.spc_file
        spc_file.contour = event
        self.item.setData_set([(spc_file.x, spc_file.conc2spectrum(c)) for c in np.arange(conc_c_min, conc_c_max + 1, event)])
        # update single steps in conc_spbx
        self.conc_spbx.setSingleStep(self.contour_spbx.value())
    def set_lut(self, event):
        from Modules import general_functions as gf
        file_path, file_type = QFileDialog.getOpenFileName(self.parent_window, 'Select lookup table file', gf.settings["last opened dir"], filter="lut files (*.lut)")
        if not file_path:
            return
        # open lut
        lut_array = gf.import_lut(file_path)
        self.item.setLUT(lut_array)
    func_dict = {"init_widgets":init_widgets, "conc_spbx_value_changed":conc_spbx_value_changed, "contour_spbx_changed":contour_spbx_changed, "set_lut":set_lut}
    from Modules import my_widgets as my_w
    from Modules import general_functions as gf
    items = my_w.PlotDataItemsWithLUT([(self.x, self.conc2spectrum(c)) for c in np.arange(conc_c_min, conc_c_max + 1)], pen=gf.mk_u_pen(50)) # slower
    # items = my_w.PlotDataItems([(self.x, self.conc2spectrum(c)) for c in np.arange(conc_c_min, conc_c_max + 1)], pen=gf.mk_u_pen(50))       # faster
    master_processes = ["self.parent.spectrum_widget.addItem(params['item'])"]
    params = {
        "item":items, 
        "detail":"interpolated", 
        "draw":"none", 
        "data":[None, None], 
        "func_dict":func_dict, 
        "master_processes":master_processes
        }
    self.write_to_object(master_key="PreP", key_list=['prep_order'], data_list=[[['CustomBtn_master', {"mode":"init_s", "params":params}]]])
# conc2spectrum(self, input_conc):
    import numpy as np
    # case 1
    if input_conc < self.conc_c_list[0]:
        return self.y_set[:, 0]
    # case 2
    elif input_conc > self.conc_c_list[-1]:
        return self.y_set[:, -1]
    # case 3
    else:
        val_list = np.empty(len(self.x), dtype=float)
        for i, f in enumerate(self.y_func_list):
            val_list[i] = f([input_conc])
        return val_list   # shape:(len(x_val_list))
"""

# ファイル開く
import types
from scipy.stats import t
from Modules import cspc_core as cspc
f = io.StringIO(custom_spc_data)
img_cb_info = cspc.ImgCbInfo(f)
cspc_file = cspc.CustomSpc(img_cb_info)

# unmixing
def unmixing(self, sRS, eRS, no_baseline_for_added=False):
    # プログレスバー処理
    self.pbar_widget = popups.ProgressBarWidget(parent=self, message="Executing spectrum unmixing... please wait.", message2="0 out of {0}".format(self.spc_file.fnsub))
    self.pbar_widget.show()
    segment_list = self.pbar_widget.get_segment_list(self.spc_file.fnsub, 97)
    # (sRS, eRS)と(sRS-idx, eRS-idx)は必ずしも一致しない（RSは降順にもなりうるがidxはあくまで昇順に並ぶ）
    sRS_idx, eRS_idx = np.sort([self.spc_file.get_idx(sRS), self.spc_file.get_idx(eRS)])
    # x軸取得（master_y_list は使われる前にアップデートされる）
    umx_x_list, master_y_list = self.spc_file.get_data(sRS, eRS, 0)
    n_data_points = len(umx_x_list)
    n_spectrum = 5
    # デコンボ素材：@cfp より、background を取得
    cfp_loc = self.spc_file.log_dict[b"point_of_interest_dict"].get("@cfp", None)
    if cfp_loc is not None:
        sub_idx = self.spc_file.get_sub_idx(*cfp_loc)
        cfp_spectrun = np.copy(self.spc_file.sub[sub_idx].y[sRS_idx:eRS_idx + 1])
        # signal to baseline と同じ手法でで bg を除く（引いても引かなくても結果は定数倍にしかならない（はず）。スタンダードから引いておいたほうが結果が見やすい。）
        if not no_baseline_for_added:
            cfp_spectrun -= np.linspace(cfp_spectrun[0], cfp_spectrun[-1], num=n_data_points)
    else:
        # プログレスバー処理
        self.pbar_widget.master_close()
        raise Exception("Point of interest named '@cfp' is required!")
    # matrix A
    slope_list1 = umx_x_list - umx_x_list.min()   # slopeは常に正の値
    slope_list2 = umx_x_list.max() - umx_x_list   # 増減が逆のsloopeも常に正
    regional_y_matrix = np.empty((n_data_points, n_spectrum))    # n_spectrum: [ref_spectrum, background, intercept, slope1, slope2]
    # regional_y_matrix[:, 0] is dynamically set.
    regional_y_matrix[:, -4] = cfp_spectrun
    regional_y_matrix[:, -3] = -1
    regional_y_matrix[:, -2] = slope_list1
    regional_y_matrix[:, -1] = slope_list2
    # 面積格納庫：これに高さを掛けた値が、エリア値となるわけよ。
    x_range = np.ptp(umx_x_list)
    x_diff_list_half = np.absolute(np.diff(umx_x_list)) / 2   # 追加スペクトル依存的な基本面積を求めるのに必要
    basic_area_values = np.empty(n_spectrum - 1, dtype=float)   # conc. については、basic_area_values がダイナミックに決まるため、別処理する。
    basic_area_values[-4] = ((cfp_spectrun[1:] + cfp_spectrun[:-1]) * x_diff_list_half).sum()
    basic_area_values[-3] = -x_range                  # intercept
    basic_area_values[[-2, -1]] = x_range ** 2 / 2    # slope
    # アンミキシング
    from scipy.optimize import minimize_scalar
    from scipy.optimize import nnls
    umx_height_matrix = np.empty((self.spc_file.fnsub, n_spectrum), dtype=float)
    conc_list = np.zeros(self.spc_file.fnsub, dtype=float)
    conc_area_x_height_list = np.empty(self.spc_file.fnsub, dtype=float)
    # interpする場合は元のデータのxは昇順である必要がある
    order = np.argsort(cspc_file.x)
    x_list = cspc_file.x[order]
    # c_range = (min(cspc_file.conc_c_list), max(cspc_file.conc_c_list))

    # pval, rnorm ###
    p_val_set = np.empty((self.spc_file.fnsub, n_spectrum - 1), dtype=float)   # remove slope 2 from (peak, background, slope1, slope2, intercept) to dodge Multicollinearity
    rnorm_set = np.empty((self.spc_file.fnsub, 3), dtype=float) # lpc_signal^2, cfp_signal^2, rnorm
    cfp_power = (cfp_spectrun ** 2).sum()
    ##########

    # ループ
    for idx, sub in enumerate(self.spc_file.sub):
        master_y_list = sub.y[sRS_idx:eRS_idx + 1]
        # 最小化する関数
        def func(input_conc):
            regional_y_matrix[:, 0] = np.interp(umx_x_list, x_list, cspc_file.conc2spectrum(input_conc)[order])
            coefficients, rnorm = nnls(regional_y_matrix, master_y_list)
            return rnorm
        # 最小化
        res = minimize_scalar(func)#, bounds=c_range, method="bounded") # "bounded" method does not seem to return best answer.
        # 再計算し、係数（coefficients）を求める
        regional_y0_list = np.interp(umx_x_list, x_list, cspc_file.conc2spectrum(res.x)[order])
        regional_y_matrix[:, 0] = regional_y0_list
        coefficients, rnorm = nnls(regional_y_matrix, master_y_list)
        umx_height_matrix[idx, :] = coefficients
        conc_list[idx] = res.x
        conc_area_x_height_list[idx] = ((regional_y0_list[1:] + regional_y0_list[:-1]) * x_diff_list_half).sum() * coefficients[0]

        # pval ### ls_analysis(A, b, x_hat, Var_pre, d_freedom)
        p_val_set[idx, :] = ls_analysis(A=regional_y_matrix, x_hat=coefficients, b=master_y_list)
        rnorm_set[idx, 0] = (regional_y0_list  ** 2).sum() * coefficients[0] ** 2
        rnorm_set[idx, 1] = cfp_power * (coefficients[1] ** 2)
        rnorm_set[idx, -1] = rnorm ** 2
        ##########

        # プログレスバー処理
        if idx in segment_list:
            self.pbar_widget.addValue(1)
        else:
            self.pbar_widget.setLabel2("{0} out of {1}".format(idx, self.spc_file.fnsub))
        print('\r{0} out of {1}'.format(idx, self.spc_file.fnsub), end='')
    # 面積処理
    area_list_set = umx_height_matrix[:, 1:] * basic_area_values[np.newaxis, :]    # (self.spc_file.fnsub, n_spectrum - 1): cfp, intercept, slope1, slope2
    area_list_set = np.concatenate((
        # area_values
        conc_list[:, np.newaxis],                           # conc values
        conc_area_x_height_list[:, np.newaxis],             # LPC シグナル
        area_list_set[:, -4:-3],                            # cfp シグナル
        area_list_set[:, -3:].sum(axis=1)[:, np.newaxis],   # baselineシグナル
        (area_list_set[:, -4:].sum(axis=1) + conc_area_x_height_list)[:, np.newaxis],  # LPC + cfp + baseline シグナル
        p_val_set[:, :2],                                   # p_values for LPC, cfp
        rnorm_set                                           # LPC_power, cfp_power, rnorm
    ), axis=1)                                      # conc., conc_area_x_height_list, cfp, baseline, total, p_values_LPC, p_values_cfp, LPC_power, cfp_power, rnorm
    # 面積値代入
    optional_name_list = ["concentration", "LPC_area", "background", "baseline_drift", "total_signal", "p_val(LPC)", "p_val(cfp)", "LPC(power)", "background(power)", "rnorm"]
    optional_id_list = ["conc", "1", "2", "bd", "ts", "1p", "2p", "1pow", "2pow", "rnorm"]
    line_idx_list = [0, 0, 1, -2, -1, 0, 1, 0, 1, -1]
    item_list = [
        draw.Image2D(
            np.reshape(area_list, self.spc_file.get_shape()).T, 
            name="unmixed_{0}-{1}_{2}".format(sRS, eRS, optional_id)
        ) for area_list, optional_id in zip(area_list_set.T, optional_id_list)]
    # map データ準備
    content = "map"
    umx_class = draw.AddedContent_Unmixed
    unmixed_data_list = []
    for optional_id, line_idx in zip(optional_id_list, line_idx_list):
        unmixed_data = draw.UnmixedData(
            abs_id = self.abs_id, 
            standard_type = optional_id, 
            line_idx = line_idx, 
            umx_x_list = umx_x_list, 
            umx_y_matrix = regional_y_matrix,   # shape:(len(umx_x_list), n_spectrum)
            umx_h_matrix = umx_height_matrix,   # shape:(fnsub, n_spectrum)
            conc_list = conc_list,              # shape:(fnsub,)
            cspc_file = cspc_file
        ) 
        unmixed_data.get_y_data_matrix = types.MethodType(get_y_data_matrix, unmixed_data)
        unmixed_data.get_line_data_list = types.MethodType(get_line_data_list, unmixed_data)
        unmixed_data.get_region_data_list = types.MethodType(get_region_data_list, unmixed_data)
        unmixed_data_list.append(unmixed_data)
    # ボタン追加
    for item, optional_name, unmixed_data in zip(item_list, optional_name_list, unmixed_data_list):
        self.parent.toolbar_layout.add_content(
            umx_class(
                item=item, 
                info={"content":content, "type":"unmixed", "detail":optional_name, "draw":"func", "data":[sRS, eRS], "advanced_data":unmixed_data}, 
                parent_window=self.parent
            )
        )
    # プログレスバー処理
    self.abs_id += 1
    self.pbar_widget.is_close_allowed = True
    self.pbar_widget.close()
# UnmixedData 用関数
def get_y_data_matrix(self, sub_idx):
    order = np.argsort(self.cspc_file.x)
    self.umx_y_matrix[:, 0] = np.interp(self.umx_x_list, self.cspc_file.x[order], self.cspc_file.conc2spectrum(self.conc_list[sub_idx])[order])
    y_matrix = self.umx_y_matrix * self.umx_h_matrix[sub_idx]
    bd_matrix = y_matrix[:, -3:].sum(axis=1, keepdims=True)
    y_data_matrix = np.empty((len(self.umx_x_list), self.N_lines()), dtype=float)
    y_data_matrix[:, :-2] = y_matrix[:, :-3] + bd_matrix
    y_data_matrix[:, -2]  = bd_matrix[:, 0]         # bd
    y_data_matrix[:, -1]  = y_matrix.sum(axis=1)    # ts
    return y_data_matrix
def get_line_data_list(self, sub_idx, original_spc_file=None):
    return [(self.umx_x_list, y_data) for y_data in self.get_y_data_matrix(sub_idx).T]
def get_region_data_list(self, sub_idx, original_spc_file=None):
    order = np.argsort(self.cspc_file.x)
    self.umx_y_matrix[:, 0] = np.interp(self.umx_x_list, self.cspc_file.x[order], self.cspc_file.conc2spectrum(self.conc_list[sub_idx])[order])
    y_matrix = self.umx_y_matrix * self.umx_h_matrix[sub_idx]
    # bottom_line
    print(self.standard_type, self.standard_type == "rnorm")
    if self.standard_type in ("bd", "ts"):
        btm_line = pg.PlotDataItem(self.umx_x_list[[0, -1]], [0, 0], fillLevel=0, pen=gf.mk_u_pen())
    elif self.standard_type == "rnorm":
        x_list, y_list = original_spc_file.get_data(self.umx_x_list[0], self.umx_x_list[-1], sub_idx=sub_idx)
        btm_line = pg.PlotDataItem(x_list, y_list, fillLevel=0, pen=gf.mk_u_pen())
    else:
        btm_line = pg.PlotDataItem(self.umx_x_list[[0, -1]], y_matrix[[0, -1], -3:].sum(axis=1), fillLevel=0, pen=gf.mk_u_pen())
    # top line
    if self.standard_type == "bd":
        top_line = pg.PlotDataItem(self.umx_x_list, y_matrix[:, -3:].sum(axis=1), fillLevel=0, pen=gf.mk_u_pen())
    elif self.standard_type in ("ts", "rnorm"):
        top_line = pg.PlotDataItem(self.umx_x_list, y_matrix.sum(axis=1), fillLevel=0, pen=gf.mk_u_pen())
    else:
        top_line = pg.PlotDataItem(self.umx_x_list, y_matrix[:, [self.line_idx, -3, -2, -1]].sum(axis=1), fillLevel=0, pen=gf.mk_u_pen())
    return [(btm_line, top_line)]
# argmin_x ||Ax - b||
# 片側 5% 検定
# def ls_stat_pre(A):
#     mod_A = np.delete(A, -2, axis=None)    # slopeが2つ出てくると多重共線性が出てきてしまう。
#     N_data, N_var = mod_A.shape
#     d_freedom = N_data - N_var
#     Var_pre = np.diag(np.linalg.inv(np.dot(mod_A.T, mod_A))) / d_freedom
#     return Var_pre, d_freedom
def ls_analysis(A, x_hat, b):
    A_mod = A[:, :-1]
    x_hat_mod = np.hstack((x_hat[:-3], [x_hat[-3] - np.max(A[:, -2]) * x_hat[-1]], [x_hat[-2] -  x_hat[-1]]))      # slopeが2つ出てくると多重共線性が出てきてしまう。
    # 1st section
    N_data, N_var = A_mod.shape
    d_freedom = N_data - N_var
    Var_pre = np.diag(np.linalg.inv(np.dot(A_mod.T, A_mod)))
    # 2nd section
    e = np.dot(A_mod, x_hat_mod) - b
    SE = np.sqrt(Var_pre / d_freedom * np.dot(e, e.T))
    t_vals = np.divide(x_hat_mod, SE)
    p = t.cdf(-np.absolute(t_vals), df=d_freedom)
    # btm = x_hat - t.ppf(0.975, df=d_freedom) * SE
    # top = x_hat + t.ppf(0.975, df=d_freedom) * SE
    # btm95 = x_hat - t.ppf(0.95, df=d_freedom) * SE
    return p    #, btm95, SE, t_vals

###
###
###

# 範囲決定
current_focused_window = self.current_focused_window
if current_focused_window.window_type != "ms":
    raise Exception("invalid window type")

seRS = self.temp_variables.get("range", None)
if seRS is None:
    range_setting_popup = popups.RangeSettingsPopup(initial_values=(2000,2300))
    done = range_setting_popup.exec_()
    if done == 0:
        raise Exception("process was canceled")
    else:
        sRS = range_setting_popup.spbx_RS1.value()
        eRS = range_setting_popup.spbx_RS2.value()
        self.temp_variables["range"] = (sRS, eRS)
else:
    sRS, eRS = seRS

unmixing(current_focused_window.spectrum_widget, sRS, eRS)

# spectrum_widget に追加するのは、ただの見栄えw
cfp_loc = current_focused_window.spectrum_widget.spc_file.log_dict[b"point_of_interest_dict"]["@cfp"]
plot_data_item = pg.PlotDataItem(cspc_file.x, cspc_file.sub[0].y, fillLevel=0)
current_focused_window.spectrum_widget.replace_spectrum(*cfp_loc)
current_focused_window.toolbar_layout.add_current_spectrum()
current_focused_window.toolbar_layout.add_plot_data_item(plot_data_item, detail="from macro", data="", spc_file=cspc_file)






